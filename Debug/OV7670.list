
OV7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005170  08005170  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005178  08005178  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  080051f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080051f0  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001278f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bb  00000000  00000000  0003282f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00034df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  000359c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023464  00000000  00000000  000364d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109b3  00000000  00000000  00059934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdf22  00000000  00000000  0006a2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003824  00000000  00000000  0013825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f6c 	.word	0x08004f6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004f6c 	.word	0x08004f6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8


	uint8_t *data_write;
    uint8_t *data_read;

	bool latch = false;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
	data_write = (uint8_t*)malloc(sizeof(uint8_t));
 80005b2:	2001      	movs	r0, #1
 80005b4:	f003 fd6c 	bl	8004090 <malloc>
 80005b8:	4603      	mov	r3, r0
 80005ba:	60bb      	str	r3, [r7, #8]
	data_read = (uint8_t*)malloc(sizeof(uint8_t));
 80005bc:	2001      	movs	r0, #1
 80005be:	f003 fd67 	bl	8004090 <malloc>
 80005c2:	4603      	mov	r3, r0
 80005c4:	607b      	str	r3, [r7, #4]
	*data_write = 0x00;
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
	*data_read = 0x00;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fd7d 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8a7 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f9d9 	bl	8000990 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f98d 	bl	80008fc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80005e2:	f000 f95d 	bl	80008a0 <MX_I2C2_Init>
  MX_DMA_Init();
 80005e6:	f000 f9b3 	bl	8000950 <MX_DMA_Init>
  MX_DCMI_Init();
 80005ea:	f000 f911 	bl	8000810 <MX_DCMI_Init>
  /* USER CODE BEGIN 2 */
  _hdcmi = &hdcmi;
 80005ee:	4b47      	ldr	r3, [pc, #284]	; (800070c <main+0x164>)
 80005f0:	4a47      	ldr	r2, [pc, #284]	; (8000710 <main+0x168>)
 80005f2:	601a      	str	r2, [r3, #0]
  OV7670_Init();
 80005f4:	f000 fa68 	bl	8000ac8 <OV7670_Init>
  DCMI_DMA_LINK(_hdcmi);
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <main+0x164>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fa4b 	bl	8000a98 <DCMI_DMA_LINK>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* I2C code (SCCB) */
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4843      	ldr	r0, [pc, #268]	; (8000714 <main+0x16c>)
 8000608:	f001 fcbe 	bl	8001f88 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d109      	bne.n	8000626 <main+0x7e>
		while (1){
			if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	483f      	ldr	r0, [pc, #252]	; (8000714 <main+0x16c>)
 8000618:	f001 fcb6 	bl	8001f88 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d1f7      	bne.n	8000612 <main+0x6a>
				latch = true;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
				break;
			}
		}
	}
	if (latch){
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0ea      	beq.n	8000602 <main+0x5a>
		latch = false;
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]

		/* SCCB */
		/* SCCB is an i2c-like protocal */

		/* Read manufacturer ID (High and Low) */
		*data_write = OV7670_MIDH;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	221c      	movs	r2, #28
 8000634:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, DevAddress_write, data_write, 2, HAL_MAX_DELAY);// Write regiter address
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2302      	movs	r3, #2
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	2142      	movs	r1, #66	; 0x42
 8000642:	4835      	ldr	r0, [pc, #212]	; (8000718 <main+0x170>)
 8000644:	f001 fe16 	bl	8002274 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, DevAddress_read, data_read, 2, HAL_MAX_DELAY);// Receive from that register(Use data_read to catch info)
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2302      	movs	r3, #2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	2143      	movs	r1, #67	; 0x43
 8000654:	4830      	ldr	r0, [pc, #192]	; (8000718 <main+0x170>)
 8000656:	f001 ff0b 	bl	8002470 <HAL_I2C_Master_Receive>
		printf("The manufacturer IDDDDD: %d", *data_read);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	482e      	ldr	r0, [pc, #184]	; (800071c <main+0x174>)
 8000662:	f003 fdd7 	bl	8004214 <iprintf>
		*data_write = OV7670_MIDL;
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	221d      	movs	r2, #29
 800066a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, DevAddress_write, data_write, 2, HAL_MAX_DELAY);// Write regiter address
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2302      	movs	r3, #2
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	2142      	movs	r1, #66	; 0x42
 8000678:	4827      	ldr	r0, [pc, #156]	; (8000718 <main+0x170>)
 800067a:	f001 fdfb 	bl	8002274 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, DevAddress_read, data_read, 2, HAL_MAX_DELAY);// Receive from that register(Use data_read to catch info)
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2302      	movs	r3, #2
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	2143      	movs	r1, #67	; 0x43
 800068a:	4823      	ldr	r0, [pc, #140]	; (8000718 <main+0x170>)
 800068c:	f001 fef0 	bl	8002470 <HAL_I2C_Master_Receive>
		printf("%d\r\n", *data_read);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	4822      	ldr	r0, [pc, #136]	; (8000720 <main+0x178>)
 8000698:	f003 fdbc 	bl	8004214 <iprintf>

		/* Read product ID Number(MSB and LSB) */
		*data_write = OV7670_PID;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	220a      	movs	r2, #10
 80006a0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, DevAddress_write, data_write, 2, HAL_MAX_DELAY);// Write regiter address
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2302      	movs	r3, #2
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	2142      	movs	r1, #66	; 0x42
 80006ae:	481a      	ldr	r0, [pc, #104]	; (8000718 <main+0x170>)
 80006b0:	f001 fde0 	bl	8002274 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, DevAddress_read, data_read, 2, HAL_MAX_DELAY);// Receive from that register(Use data_read to catch info)
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2302      	movs	r3, #2
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	2143      	movs	r1, #67	; 0x43
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <main+0x170>)
 80006c2:	f001 fed5 	bl	8002470 <HAL_I2C_Master_Receive>
		printf("The Product IDDD Number: %d", *data_read);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4815      	ldr	r0, [pc, #84]	; (8000724 <main+0x17c>)
 80006ce:	f003 fda1 	bl	8004214 <iprintf>
		*data_write = OV7670_VER;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	220b      	movs	r2, #11
 80006d6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, DevAddress_write, data_write, 2, HAL_MAX_DELAY);// Write regiter address
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2302      	movs	r3, #2
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	2142      	movs	r1, #66	; 0x42
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <main+0x170>)
 80006e6:	f001 fdc5 	bl	8002274 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, DevAddress_read, data_read, 2, HAL_MAX_DELAY);// Receive from that register(Use data_read to catch info)
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2302      	movs	r3, #2
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	2143      	movs	r1, #67	; 0x43
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <main+0x170>)
 80006f8:	f001 feba 	bl	8002470 <HAL_I2C_Master_Receive>
		printf("%d\r\n", *data_read);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <main+0x178>)
 8000704:	f003 fd86 	bl	8004214 <iprintf>
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000708:	e77b      	b.n	8000602 <main+0x5a>
 800070a:	bf00      	nop
 800070c:	2000014c 	.word	0x2000014c
 8000710:	20000150 	.word	0x20000150
 8000714:	40020800 	.word	0x40020800
 8000718:	20000098 	.word	0x20000098
 800071c:	08004f84 	.word	0x08004f84
 8000720:	08004fa0 	.word	0x08004fa0
 8000724:	08004fa8 	.word	0x08004fa8

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2234      	movs	r2, #52	; 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fcba 	bl	80040b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <SystemClock_Config+0xe0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <SystemClock_Config+0xe0>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <SystemClock_Config+0xe0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <SystemClock_Config+0xe4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000774:	4a25      	ldr	r2, [pc, #148]	; (800080c <SystemClock_Config+0xe4>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <SystemClock_Config+0xe4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800079c:	2310      	movs	r3, #16
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 80007a0:	23c8      	movs	r3, #200	; 0xc8
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fe8d 	bl	80034d4 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c0:	f000 f97c 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	2103      	movs	r1, #3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fb98 	bl	8002f18 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ee:	f000 f965 	bl	8000abc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 80007f2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80007f6:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80007fa:	2000      	movs	r0, #0
 80007fc:	f002 fc72 	bl	80030e4 <HAL_RCC_MCOConfig>
}
 8000800:	bf00      	nop
 8000802:	3750      	adds	r7, #80	; 0x50
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DCMI_Init 0 */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_DCMI_Init+0x84>)
 800081c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081e:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <MX_DCMI_Init+0x84>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6353      	str	r3, [r2, #52]	; 0x34
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_DCMI_Init+0x84>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_DCMI_Init+0x88>)
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <MX_DCMI_Init+0x8c>)
 8000836:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_DCMI_Init+0x88>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_DCMI_Init+0x88>)
 8000840:	2220      	movs	r2, #32
 8000842:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_DCMI_Init+0x88>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_DCMI_Init+0x88>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_DCMI_Init+0x88>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_DCMI_Init+0x88>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_DCMI_Init+0x88>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_DCMI_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_DCMI_Init+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_DCMI_Init+0x88>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_DCMI_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_DCMI_Init+0x88>)
 800087c:	f000 fe6a 	bl	8001554 <HAL_DCMI_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_DCMI_Init+0x7a>
  {
    Error_Handler();
 8000886:	f000 f919 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	20000150 	.word	0x20000150
 800089c:	50050000 	.word	0x50050000

080008a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_I2C2_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_I2C2_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_I2C2_Init+0x50>)
 80008de:	f001 fb85 	bl	8001fec <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 f8e8 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000098 	.word	0x20000098
 80008f4:	40005800 	.word	0x40005800
 80008f8:	000186a0 	.word	0x000186a0

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f003 f86c 	bl	8003a10 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f8bd 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200001a0 	.word	0x200001a0
 800094c:	40004400 	.word	0x40004400

08000950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_DMA_Init+0x3c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <MX_DMA_Init+0x3c>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_DMA_Init+0x3c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2039      	movs	r0, #57	; 0x39
 8000978:	f000 fcf7 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800097c:	2039      	movs	r0, #57	; 0x39
 800097e:	f000 fd10 	bl	80013a2 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_GPIO_Init+0xd8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2120      	movs	r1, #32
 80009fe:	481b      	ldr	r0, [pc, #108]	; (8000a6c <MX_GPIO_Init+0xdc>)
 8000a00:	f001 fada 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4815      	ldr	r0, [pc, #84]	; (8000a70 <MX_GPIO_Init+0xe0>)
 8000a1c:	f001 f920 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_GPIO_Init+0xdc>)
 8000a38:	f001 f912 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_GPIO_Init+0xdc>)
 8000a5a:	f001 f901 	bl	8001c60 <HAL_GPIO_Init>

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800

08000a74 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a7c:	1d39      	adds	r1, r7, #4
 8000a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a82:	2201      	movs	r2, #1
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <__io_putchar+0x20>)
 8000a86:	f003 f810 	bl	8003aaa <HAL_UART_Transmit>

  return ch;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200001a0 	.word	0x200001a0

08000a98 <DCMI_DMA_LINK>:

void DCMI_DMA_LINK(DCMI_HandleTypeDef *hdcmi)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	__HAL_LINKDMA(hdcmi, DMA_Handle, hdma_dcmi);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <DCMI_DMA_LINK+0x20>)
 8000aa4:	649a      	str	r2, [r3, #72]	; 0x48
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <DCMI_DMA_LINK+0x20>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	200000ec 	.word	0x200000ec

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <OV7670_Init>:
		{0x4b, 0x01}

};

bool OV7670_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
    uint8_t *data;
    HAL_StatusTypeDef result;
    data = malloc(sizeof(uint8_t));
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f003 fade 	bl	8004090 <malloc>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60bb      	str	r3, [r7, #8]
    if (!data)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <OV7670_Init+0x1a>
    	return false;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e023      	b.n	8000b2a <OV7670_Init+0x62>
    for (int i = 0; i < OV7670_REG_NUM; i++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e019      	b.n	8000b1c <OV7670_Init+0x54>
    	*data = OV7670_reg[i][1];
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <OV7670_Init+0x6c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	785a      	ldrb	r2, [r3, #1]
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	701a      	strb	r2, [r3, #0]
    	result = HAL_I2C_Master_Transmit(&i2c, DevAddress_write, data, 2, HAL_MAX_DELAY); /* Write regiter address */
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2302      	movs	r3, #2
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	2142      	movs	r1, #66	; 0x42
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <OV7670_Init+0x70>)
 8000b04:	f001 fbb6 	bl	8002274 <HAL_I2C_Master_Transmit>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
    	if (result == HAL_ERROR)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d101      	bne.n	8000b16 <OV7670_Init+0x4e>
    		return false;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e009      	b.n	8000b2a <OV7670_Init+0x62>
    for (int i = 0; i < OV7670_REG_NUM; i++){
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b79      	cmp	r3, #121	; 0x79
 8000b20:	dde2      	ble.n	8000ae8 <OV7670_Init+0x20>
    }
    free(data);
 8000b22:	68b8      	ldr	r0, [r7, #8]
 8000b24:	f003 fabc 	bl	80040a0 <free>
	return true;
 8000b28:	2301      	movs	r3, #1
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08004fc4 	.word	0x08004fc4
 8000b38:	200001e4 	.word	0x200001e4

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a5a      	ldr	r2, [pc, #360]	; (8000d14 <HAL_DCMI_MspInit+0x188>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 80ae 	bne.w	8000d0c <HAL_DCMI_MspInit+0x180>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb8:	4a57      	ldr	r2, [pc, #348]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6353      	str	r3, [r2, #52]	; 0x34
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	4b51      	ldr	r3, [pc, #324]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a50      	ldr	r2, [pc, #320]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
 8000c14:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <HAL_DCMI_MspInit+0x18c>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000c20:	2350      	movs	r3, #80	; 0x50
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c30:	230d      	movs	r3, #13
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4838      	ldr	r0, [pc, #224]	; (8000d1c <HAL_DCMI_MspInit+0x190>)
 8000c3c:	f001 f810 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000c40:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8000c44:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c52:	230d      	movs	r3, #13
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4830      	ldr	r0, [pc, #192]	; (8000d20 <HAL_DCMI_MspInit+0x194>)
 8000c5e:	f000 ffff 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c62:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c74:	230d      	movs	r3, #13
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4829      	ldr	r0, [pc, #164]	; (8000d24 <HAL_DCMI_MspInit+0x198>)
 8000c80:	f000 ffee 	bl	8001c60 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <HAL_DCMI_MspInit+0x1a0>)
 8000c88:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbc:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cc8:	2204      	movs	r2, #4
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cce:	2203      	movs	r2, #3
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000ce2:	f000 fcb1 	bl	8001648 <HAL_DMA_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_DCMI_MspInit+0x164>
    {
      Error_Handler();
 8000cec:	f7ff fee6 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cf4:	649a      	str	r2, [r3, #72]	; 0x48
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_DCMI_MspInit+0x19c>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	204e      	movs	r0, #78	; 0x4e
 8000d02:	f000 fb32 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000d06:	204e      	movs	r0, #78	; 0x4e
 8000d08:	f000 fb4b 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3730      	adds	r7, #48	; 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	50050000 	.word	0x50050000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	200000ec 	.word	0x200000ec
 8000d2c:	40026428 	.word	0x40026428

08000d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a29      	ldr	r2, [pc, #164]	; (8000df4 <HAL_I2C_MspInit+0xc4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d14b      	bne.n	8000dea <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a20      	ldr	r2, [pc, #128]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <HAL_I2C_MspInit+0xcc>)
 8000da8:	f000 ff5a 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db2:	2312      	movs	r3, #18
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <HAL_I2C_MspInit+0xd0>)
 8000dca:	f000 ff49 	bl	8001c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_I2C_MspInit+0xc8>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40005800 	.word	0x40005800
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	40020800 	.word	0x40020800

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12b      	bne.n	8000e7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_UART_MspInit+0x8c>)
 8000e7a:	f000 fef1 	bl	8001c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f948 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA2_Stream1_IRQHandler+0x10>)
 8000eee:	f000 fc7b 	bl	80017e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000ec 	.word	0x200000ec

08000efc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <DCMI_IRQHandler+0x10>)
 8000f02:	f000 fa69 	bl	80013d8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000150 	.word	0x20000150

08000f10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e00a      	b.n	8000f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f22:	f3af 8000 	nop.w
 8000f26:	4601      	mov	r1, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf0      	blt.n	8000f22 <_read+0x12>
	}

return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e009      	b.n	8000f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fd85 	bl	8000a74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf1      	blt.n	8000f5c <_write+0x12>
	}
	return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
	return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f003 f80e 	bl	800403c <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20020000 	.word	0x20020000
 800104c:	00000400 	.word	0x00000400
 8001050:	2000008c 	.word	0x2000008c
 8001054:	200002a0 	.word	0x200002a0

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
 8001086:	2300      	movs	r3, #0
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:
 800108a:	58d4      	ldr	r4, [r2, r3]
 800108c:	50c4      	str	r4, [r0, r3]
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:
 8001090:	18c4      	adds	r4, r0, r3
 8001092:	428c      	cmp	r4, r1
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
 800109a:	2300      	movs	r3, #0
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:
 80010a2:	42a2      	cmp	r2, r4
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
 80010aa:	f002 ffcd 	bl	8004048 <__libc_init_array>
 80010ae:	f7ff fa7b 	bl	80005a8 <main>
 80010b2:	4770      	bx	lr
 80010b4:	20020000 	.word	0x20020000
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000070 	.word	0x20000070
 80010c0:	08005180 	.word	0x08005180
 80010c4:	20000070 	.word	0x20000070
 80010c8:	2000029c 	.word	0x2000029c

080010cc <ADC_IRQHandler>:
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f92b 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fd1a 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f943 	bl	80013be <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f90b 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000008 	.word	0x20000008
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20000288 	.word	0x20000288

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000288 	.word	0x20000288

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff3e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff31 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffa2 	bl	8001310 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2204      	movs	r2, #4
 80013f8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f043 0202 	orr.w	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2204      	movs	r2, #4
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	4a2f      	ldr	r2, [pc, #188]	; (80014d0 <HAL_DCMI_IRQHandler+0xf8>)
 8001414:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f9c2 	bl	80017a4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2202      	movs	r2, #2
 8001430:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2204      	movs	r2, #4
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_DCMI_IRQHandler+0xf8>)
 800144c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f9a6 	bl	80017a4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2210      	movs	r2, #16
 8001468:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f83c 	bl	80014e8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2208      	movs	r2, #8
 8001480:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f83a 	bl	80014fc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d019      	beq.n	80014c6 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b02      	cmp	r3, #2
 800149e:	d107      	bne.n	80014b0 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 021e 	bic.w	r2, r2, #30
 80014ae:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f825 	bl	8001510 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08001525 	.word	0x08001525

080014d4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001530:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	2b02      	cmp	r3, #2
 800153a:	d003      	beq.n	8001544 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff ffc5 	bl	80014d4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e069      	b.n	800163a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fb06 	bl	8000b8c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fb03 	bl	8000b8c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6819      	ldr	r1, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_DCMI_Init+0xf0>)
 800159a:	400b      	ands	r3, r1
 800159c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80015b2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80015be:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80015ca:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 80015d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80015e2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b10      	cmp	r3, #16
 80015f2:	d112      	bne.n	800161a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7f1b      	ldrb	r3, [r3, #28]
 80015f8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7f5b      	ldrb	r3, [r3, #29]
 80015fe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001600:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7f9b      	ldrb	r3, [r3, #30]
 8001606:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001608:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7fdb      	ldrb	r3, [r3, #31]
 8001610:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001616:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001618:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 021e 	orr.w	r2, r2, #30
 8001628:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	ffe0f007 	.word	0xffe0f007

08001648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff fda2 	bl	800119c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e099      	b.n	8001798 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001684:	e00f      	b.n	80016a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001686:	f7ff fd89 	bl	800119c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b05      	cmp	r3, #5
 8001692:	d908      	bls.n	80016a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e078      	b.n	8001798 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e8      	bne.n	8001686 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_DMA_Init+0x158>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4313      	orrs	r3, r2
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f023 0307 	bic.w	r3, r3, #7
 8001726:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	4313      	orrs	r3, r2
 8001730:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	2b04      	cmp	r3, #4
 8001738:	d117      	bne.n	800176a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4313      	orrs	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00e      	beq.n	800176a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fa0b 	bl	8001b68 <DMA_CheckFifoParam>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001766:	2301      	movs	r3, #1
 8001768:	e016      	b.n	8001798 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f9c2 	bl	8001afc <DMA_CalcBaseAndBitshift>
 8001778:	4603      	mov	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	223f      	movs	r2, #63	; 0x3f
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	f010803f 	.word	0xf010803f

080017a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d004      	beq.n	80017c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00c      	b.n	80017dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2205      	movs	r2, #5
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017f4:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <HAL_DMA_IRQHandler+0x258>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a92      	ldr	r2, [pc, #584]	; (8001a44 <HAL_DMA_IRQHandler+0x25c>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0a9b      	lsrs	r3, r3, #10
 8001800:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	2208      	movs	r2, #8
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01a      	beq.n	8001854 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	2208      	movs	r2, #8
 8001842:	409a      	lsls	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	2201      	movs	r2, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d012      	beq.n	800188a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	2201      	movs	r2, #1
 8001878:	409a      	lsls	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2204      	movs	r2, #4
 8001890:	409a      	lsls	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d012      	beq.n	80018c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	2204      	movs	r2, #4
 80018ae:	409a      	lsls	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	f043 0204 	orr.w	r2, r3, #4
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2210      	movs	r2, #16
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d043      	beq.n	8001958 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03c      	beq.n	8001958 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	2210      	movs	r2, #16
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d018      	beq.n	800192a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d024      	beq.n	8001958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
 8001916:	e01f      	b.n	8001958 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01b      	beq.n	8001958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	4798      	blx	r3
 8001928:	e016      	b.n	8001958 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0208 	bic.w	r2, r2, #8
 8001946:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	2220      	movs	r2, #32
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 808e 	beq.w	8001a86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8086 	beq.w	8001a86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	2220      	movs	r2, #32
 8001980:	409a      	lsls	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b05      	cmp	r3, #5
 8001990:	d136      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0216 	bic.w	r2, r2, #22
 80019a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_DMA_IRQHandler+0x1da>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0208 	bic.w	r2, r2, #8
 80019d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	223f      	movs	r2, #63	; 0x3f
 80019d8:	409a      	lsls	r2, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d07d      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
        }
        return;
 80019fe:	e078      	b.n	8001af2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01c      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d108      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d030      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
 8001a2c:	e02b      	b.n	8001a86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d027      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
 8001a3e:	e022      	b.n	8001a86 <HAL_DMA_IRQHandler+0x29e>
 8001a40:	20000000 	.word	0x20000000
 8001a44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0210 	bic.w	r2, r2, #16
 8001a64:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d032      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d022      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d307      	bcc.n	8001ace <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f2      	bne.n	8001ab2 <HAL_DMA_IRQHandler+0x2ca>
 8001acc:	e000      	b.n	8001ad0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ace:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
 8001af0:	e000      	b.n	8001af4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001af2:	bf00      	nop
    }
  }
}
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop

08001afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3b10      	subs	r3, #16
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <DMA_CalcBaseAndBitshift+0x64>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <DMA_CalcBaseAndBitshift+0x68>)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d909      	bls.n	8001b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	1d1a      	adds	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b3c:	e007      	b.n	8001b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	aaaaaaab 	.word	0xaaaaaaab
 8001b64:	080050d0 	.word	0x080050d0

08001b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11f      	bne.n	8001bc2 <DMA_CheckFifoParam+0x5a>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d856      	bhi.n	8001c36 <DMA_CheckFifoParam+0xce>
 8001b88:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <DMA_CheckFifoParam+0x28>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001bb3 	.word	0x08001bb3
 8001b98:	08001ba1 	.word	0x08001ba1
 8001b9c:	08001c37 	.word	0x08001c37
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d046      	beq.n	8001c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb0:	e043      	b.n	8001c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bba:	d140      	bne.n	8001c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc0:	e03d      	b.n	8001c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bca:	d121      	bne.n	8001c10 <DMA_CheckFifoParam+0xa8>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d837      	bhi.n	8001c42 <DMA_CheckFifoParam+0xda>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <DMA_CheckFifoParam+0x70>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001bef 	.word	0x08001bef
 8001be0:	08001be9 	.word	0x08001be9
 8001be4:	08001c01 	.word	0x08001c01
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
      break;
 8001bec:	e030      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d025      	beq.n	8001c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfe:	e022      	b.n	8001c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c08:	d11f      	bne.n	8001c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c0e:	e01c      	b.n	8001c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d903      	bls.n	8001c1e <DMA_CheckFifoParam+0xb6>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d003      	beq.n	8001c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c1c:	e018      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
      break;
 8001c22:	e015      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00e      	beq.n	8001c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
      break;
 8001c34:	e00b      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      break;
 8001c36:	bf00      	nop
 8001c38:	e00a      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e008      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      break;
 8001c3e:	bf00      	nop
 8001c40:	e006      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      break;
 8001c42:	bf00      	nop
 8001c44:	e004      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      break;
 8001c46:	bf00      	nop
 8001c48:	e002      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c4a:	bf00      	nop
 8001c4c:	e000      	b.n	8001c50 <DMA_CheckFifoParam+0xe8>
      break;
 8001c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	e165      	b.n	8001f48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 8154 	bne.w	8001f42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d005      	beq.n	8001cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d130      	bne.n	8001d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d017      	beq.n	8001d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d123      	bne.n	8001da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80ae 	beq.w	8001f42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a5c      	ldr	r2, [pc, #368]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e02:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_GPIO_Init+0x304>)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4f      	ldr	r2, [pc, #316]	; (8001f68 <HAL_GPIO_Init+0x308>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x21a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4e      	ldr	r2, [pc, #312]	; (8001f6c <HAL_GPIO_Init+0x30c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x216>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4d      	ldr	r2, [pc, #308]	; (8001f70 <HAL_GPIO_Init+0x310>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x212>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4c      	ldr	r2, [pc, #304]	; (8001f74 <HAL_GPIO_Init+0x314>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4b      	ldr	r2, [pc, #300]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x20a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4a      	ldr	r2, [pc, #296]	; (8001f7c <HAL_GPIO_Init+0x31c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x206>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a49      	ldr	r2, [pc, #292]	; (8001f80 <HAL_GPIO_Init+0x320>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x202>
 8001e5e:	2306      	movs	r3, #6
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x21c>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x21c>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x21c>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x21c>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x21c>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x21c>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x21c>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8c:	4935      	ldr	r1, [pc, #212]	; (8001f64 <HAL_GPIO_Init+0x304>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee8:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f3c:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b0f      	cmp	r3, #15
 8001f4c:	f67f ae96 	bls.w	8001c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40013c00 	.word	0x40013c00

08001f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e001      	b.n	8001faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd4:	e003      	b.n	8001fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	041a      	lsls	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e12b      	b.n	8002256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fe8c 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2224      	movs	r2, #36	; 0x24
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800204e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002050:	f001 f8bc 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8002054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a81      	ldr	r2, [pc, #516]	; (8002260 <HAL_I2C_Init+0x274>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d807      	bhi.n	8002070 <HAL_I2C_Init+0x84>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a80      	ldr	r2, [pc, #512]	; (8002264 <HAL_I2C_Init+0x278>)
 8002064:	4293      	cmp	r3, r2
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e006      	b.n	800207e <HAL_I2C_Init+0x92>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a7d      	ldr	r2, [pc, #500]	; (8002268 <HAL_I2C_Init+0x27c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0e7      	b.n	8002256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4a78      	ldr	r2, [pc, #480]	; (800226c <HAL_I2C_Init+0x280>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a6a      	ldr	r2, [pc, #424]	; (8002260 <HAL_I2C_Init+0x274>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d802      	bhi.n	80020c0 <HAL_I2C_Init+0xd4>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3301      	adds	r3, #1
 80020be:	e009      	b.n	80020d4 <HAL_I2C_Init+0xe8>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	4a69      	ldr	r2, [pc, #420]	; (8002270 <HAL_I2C_Init+0x284>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	3301      	adds	r3, #1
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	495c      	ldr	r1, [pc, #368]	; (8002260 <HAL_I2C_Init+0x274>)
 80020f0:	428b      	cmp	r3, r1
 80020f2:	d819      	bhi.n	8002128 <HAL_I2C_Init+0x13c>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e59      	subs	r1, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002102:	1c59      	adds	r1, r3, #1
 8002104:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002108:	400b      	ands	r3, r1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_I2C_Init+0x138>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1e59      	subs	r1, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fbb1 f3f3 	udiv	r3, r1, r3
 800211c:	3301      	adds	r3, #1
 800211e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002122:	e051      	b.n	80021c8 <HAL_I2C_Init+0x1dc>
 8002124:	2304      	movs	r3, #4
 8002126:	e04f      	b.n	80021c8 <HAL_I2C_Init+0x1dc>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d111      	bne.n	8002154 <HAL_I2C_Init+0x168>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e58      	subs	r0, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	440b      	add	r3, r1
 800213e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e012      	b.n	800217a <HAL_I2C_Init+0x18e>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	0099      	lsls	r1, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_I2C_Init+0x196>
 800217e:	2301      	movs	r3, #1
 8002180:	e022      	b.n	80021c8 <HAL_I2C_Init+0x1dc>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <HAL_I2C_Init+0x1bc>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1e58      	subs	r0, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	440b      	add	r3, r1
 8002198:	fbb0 f3f3 	udiv	r3, r0, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a6:	e00f      	b.n	80021c8 <HAL_I2C_Init+0x1dc>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e58      	subs	r0, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	0099      	lsls	r1, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	6809      	ldr	r1, [r1, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6911      	ldr	r1, [r2, #16]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68d2      	ldr	r2, [r2, #12]
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	430b      	orrs	r3, r1
 800220a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	000186a0 	.word	0x000186a0
 8002264:	001e847f 	.word	0x001e847f
 8002268:	003d08ff 	.word	0x003d08ff
 800226c:	431bde83 	.word	0x431bde83
 8002270:	10624dd3 	.word	0x10624dd3

08002274 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	817b      	strh	r3, [r7, #10]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7fe ff88 	bl	800119c <HAL_GetTick>
 800228c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	f040 80e0 	bne.w	800245c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2319      	movs	r3, #25
 80022a2:	2201      	movs	r2, #1
 80022a4:	4970      	ldr	r1, [pc, #448]	; (8002468 <HAL_I2C_Master_Transmit+0x1f4>)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fc58 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0d3      	b.n	800245e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_I2C_Master_Transmit+0x50>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e0cc      	b.n	800245e <HAL_I2C_Master_Transmit+0x1ea>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d007      	beq.n	80022ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2210      	movs	r2, #16
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	893a      	ldrh	r2, [r7, #8]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a50      	ldr	r2, [pc, #320]	; (800246c <HAL_I2C_Master_Transmit+0x1f8>)
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fac2 	bl	80028bc <I2C_MasterRequestWrite>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e08d      	b.n	800245e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002358:	e066      	b.n	8002428 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fcd2 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b04      	cmp	r3, #4
 8002370:	d107      	bne.n	8002382 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002380:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06b      	b.n	800245e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_I2C_Master_Transmit+0x188>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	6a39      	ldr	r1, [r7, #32]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fcc2 	bl	8002d8a <I2C_WaitOnBTFFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b04      	cmp	r3, #4
 8002412:	d107      	bne.n	8002424 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01a      	b.n	800245e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d194      	bne.n	800235a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	00100002 	.word	0x00100002
 800246c:	ffff0000 	.word	0xffff0000

08002470 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	460b      	mov	r3, r1
 800247e:	817b      	strh	r3, [r7, #10]
 8002480:	4613      	mov	r3, r2
 8002482:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7fe fe8a 	bl	800119c <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	f040 820b 	bne.w	80028ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2319      	movs	r3, #25
 800249e:	2201      	movs	r2, #1
 80024a0:	497c      	ldr	r1, [pc, #496]	; (8002694 <HAL_I2C_Master_Receive+0x224>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fb5a 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	e1fe      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_I2C_Master_Receive+0x50>
 80024bc:	2302      	movs	r3, #2
 80024be:	e1f7      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d007      	beq.n	80024e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2222      	movs	r2, #34	; 0x22
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2210      	movs	r2, #16
 8002502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <HAL_I2C_Master_Receive+0x228>)
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002528:	8979      	ldrh	r1, [r7, #10]
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fa46 	bl	80029c0 <I2C_MasterRequestRead>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1b8      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d113      	bne.n	800256e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	623b      	str	r3, [r7, #32]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	623b      	str	r3, [r7, #32]
 800255a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e18c      	b.n	8002888 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	2b01      	cmp	r3, #1
 8002574:	d11b      	bne.n	80025ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e16c      	b.n	8002888 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d11b      	bne.n	80025ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	e14c      	b.n	8002888 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002614:	e138      	b.n	8002888 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	2b03      	cmp	r3, #3
 800261c:	f200 80f1 	bhi.w	8002802 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	2b01      	cmp	r3, #1
 8002626:	d123      	bne.n	8002670 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fbed 	bl	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e139      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800266e:	e10b      	b.n	8002888 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b02      	cmp	r3, #2
 8002676:	d14e      	bne.n	8002716 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	2200      	movs	r2, #0
 8002680:	4906      	ldr	r1, [pc, #24]	; (800269c <HAL_I2C_Master_Receive+0x22c>)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa6a 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e10e      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
 8002692:	bf00      	nop
 8002694:	00100002 	.word	0x00100002
 8002698:	ffff0000 	.word	0xffff0000
 800269c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002714:	e0b8      	b.n	8002888 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	2200      	movs	r2, #0
 800271e:	4966      	ldr	r1, [pc, #408]	; (80028b8 <HAL_I2C_Master_Receive+0x448>)
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fa1b 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0bf      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	2200      	movs	r2, #0
 800277a:	494f      	ldr	r1, [pc, #316]	; (80028b8 <HAL_I2C_Master_Receive+0x448>)
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f9ed 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e091      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002800:	e042      	b.n	8002888 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fb00 	bl	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e04c      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d118      	bne.n	8002888 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	f47f aec2 	bne.w	8002616 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	00010004 	.word	0x00010004

080028bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	460b      	mov	r3, r1
 80028ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d006      	beq.n	80028e6 <I2C_MasterRequestWrite+0x2a>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d003      	beq.n	80028e6 <I2C_MasterRequestWrite+0x2a>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e4:	d108      	bne.n	80028f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e00b      	b.n	8002910 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	2b12      	cmp	r3, #18
 80028fe:	d107      	bne.n	8002910 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f91d 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002936:	d103      	bne.n	8002940 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e035      	b.n	80029b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800294c:	d108      	bne.n	8002960 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800295c:	611a      	str	r2, [r3, #16]
 800295e:	e01b      	b.n	8002998 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002960:	897b      	ldrh	r3, [r7, #10]
 8002962:	11db      	asrs	r3, r3, #7
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 0306 	and.w	r3, r3, #6
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f063 030f 	orn	r3, r3, #15
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <I2C_MasterRequestWrite+0xfc>)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f943 	bl	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e010      	b.n	80029b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800298e:	897b      	ldrh	r3, [r7, #10]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <I2C_MasterRequestWrite+0x100>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f933 	bl	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	00010008 	.word	0x00010008
 80029bc:	00010002 	.word	0x00010002

080029c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	460b      	mov	r3, r1
 80029ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d006      	beq.n	80029fa <I2C_MasterRequestRead+0x3a>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d003      	beq.n	80029fa <I2C_MasterRequestRead+0x3a>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029f8:	d108      	bne.n	8002a0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e00b      	b.n	8002a24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	2b11      	cmp	r3, #17
 8002a12:	d107      	bne.n	8002a24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f893 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4a:	d103      	bne.n	8002a54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e079      	b.n	8002b4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a60:	d108      	bne.n	8002a74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	e05f      	b.n	8002b34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a74:	897b      	ldrh	r3, [r7, #10]
 8002a76:	11db      	asrs	r3, r3, #7
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 0306 	and.w	r3, r3, #6
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f063 030f 	orn	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4930      	ldr	r1, [pc, #192]	; (8002b54 <I2C_MasterRequestRead+0x194>)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f8b9 	bl	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e054      	b.n	8002b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4929      	ldr	r1, [pc, #164]	; (8002b58 <I2C_MasterRequestRead+0x198>)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f8a9 	bl	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e044      	b.n	8002b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f831 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0e:	d103      	bne.n	8002b18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e017      	b.n	8002b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b1c:	897b      	ldrh	r3, [r7, #10]
 8002b1e:	11db      	asrs	r3, r3, #7
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0306 	and.w	r3, r3, #6
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f063 030e 	orn	r3, r3, #14
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4907      	ldr	r1, [pc, #28]	; (8002b58 <I2C_MasterRequestRead+0x198>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f865 	bl	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	00010008 	.word	0x00010008
 8002b58:	00010002 	.word	0x00010002

08002b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6c:	e025      	b.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d021      	beq.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7fe fb11 	bl	800119c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e023      	b.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10d      	bne.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	e00c      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4013      	ands	r3, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d0b6      	beq.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c18:	e051      	b.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c28:	d123      	bne.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e046      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d021      	beq.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe fa8f 	bl	800119c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d116      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e020      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10c      	bne.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e00b      	b.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d18d      	bne.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d14:	e02d      	b.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8ce 	bl	8002eb8 <I2C_IsAcknowledgeFailed>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e02d      	b.n	8002d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d021      	beq.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7fe fa35 	bl	800119c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d116      	bne.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e007      	b.n	8002d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d1ca      	bne.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d96:	e02d      	b.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f88d 	bl	8002eb8 <I2C_IsAcknowledgeFailed>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e02d      	b.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d021      	beq.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db0:	f7fe f9f4 	bl	800119c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d302      	bcc.n	8002dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e007      	b.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d1ca      	bne.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e18:	e042      	b.n	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d119      	bne.n	8002e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0210 	mvn.w	r2, #16
 8002e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e029      	b.n	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5c:	f7fe f99e 	bl	800119c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e007      	b.n	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d1b5      	bne.n	8002e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d11b      	bne.n	8002f08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0cc      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4934      	ldr	r1, [pc, #208]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe f8c8 	bl	800119c <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe f8c4 	bl	800119c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e04f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f8bd 	bl	800321c <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f828 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	080050b8 	.word	0x080050b8
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08c      	sub	sp, #48	; 0x30
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d129      	bne.n	800314a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311c:	2303      	movs	r3, #3
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	481f      	ldr	r0, [pc, #124]	; (80031ac <HAL_RCC_MCOConfig+0xc8>)
 8003130:	f7fe fd96 	bl	8001c60 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	430b      	orrs	r3, r1
 8003142:	4919      	ldr	r1, [pc, #100]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003148:	e029      	b.n	800319e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003170:	2303      	movs	r3, #3
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800317c:	f107 031c 	add.w	r3, r7, #28
 8003180:	4619      	mov	r1, r3
 8003182:	480b      	ldr	r0, [pc, #44]	; (80031b0 <HAL_RCC_MCOConfig+0xcc>)
 8003184:	f7fe fd6c 	bl	8001c60 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	00d9      	lsls	r1, r3, #3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	430b      	orrs	r3, r1
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <HAL_RCC_MCOConfig+0xc4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
}
 800319e:	bf00      	nop
 80031a0:	3730      	adds	r7, #48	; 0x30
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40020800 	.word	0x40020800

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0a9b      	lsrs	r3, r3, #10
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	080050c8 	.word	0x080050c8

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031f8:	f7ff ffdc 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	0b5b      	lsrs	r3, r3, #13
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	080050c8 	.word	0x080050c8

0800321c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800321c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003224:	2600      	movs	r6, #0
 8003226:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003228:	2600      	movs	r6, #0
 800322a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800322c:	2600      	movs	r6, #0
 800322e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003230:	2600      	movs	r6, #0
 8003232:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003234:	2600      	movs	r6, #0
 8003236:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003238:	4ea3      	ldr	r6, [pc, #652]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800323a:	68b6      	ldr	r6, [r6, #8]
 800323c:	f006 060c 	and.w	r6, r6, #12
 8003240:	2e0c      	cmp	r6, #12
 8003242:	f200 8137 	bhi.w	80034b4 <HAL_RCC_GetSysClockFreq+0x298>
 8003246:	f20f 0c08 	addw	ip, pc, #8
 800324a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003285 	.word	0x08003285
 8003254:	080034b5 	.word	0x080034b5
 8003258:	080034b5 	.word	0x080034b5
 800325c:	080034b5 	.word	0x080034b5
 8003260:	0800328b 	.word	0x0800328b
 8003264:	080034b5 	.word	0x080034b5
 8003268:	080034b5 	.word	0x080034b5
 800326c:	080034b5 	.word	0x080034b5
 8003270:	08003291 	.word	0x08003291
 8003274:	080034b5 	.word	0x080034b5
 8003278:	080034b5 	.word	0x080034b5
 800327c:	080034b5 	.word	0x080034b5
 8003280:	080033a7 	.word	0x080033a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b91      	ldr	r3, [pc, #580]	; (80034cc <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003286:	613b      	str	r3, [r7, #16]
       break;
 8003288:	e117      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800328c:	613b      	str	r3, [r7, #16]
      break;
 800328e:	e114      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b8b      	ldr	r3, [pc, #556]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d024      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	461a      	mov	r2, r3
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f240 14ff 	movw	r4, #511	; 0x1ff
 80032b6:	f04f 0500 	mov.w	r5, #0
 80032ba:	ea02 0004 	and.w	r0, r2, r4
 80032be:	ea03 0105 	and.w	r1, r3, r5
 80032c2:	4b83      	ldr	r3, [pc, #524]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80032c4:	fb03 f201 	mul.w	r2, r3, r1
 80032c8:	2300      	movs	r3, #0
 80032ca:	fb03 f300 	mul.w	r3, r3, r0
 80032ce:	4413      	add	r3, r2
 80032d0:	4a7f      	ldr	r2, [pc, #508]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80032d2:	fba0 0102 	umull	r0, r1, r0, r2
 80032d6:	440b      	add	r3, r1
 80032d8:	4619      	mov	r1, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	461a      	mov	r2, r3
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f7fc ffe5 	bl	80002b0 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4613      	mov	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e04c      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f0:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	461a      	mov	r2, r3
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	ea02 0800 	and.w	r8, r2, r0
 8003308:	ea03 0901 	and.w	r9, r3, r1
 800330c:	4640      	mov	r0, r8
 800330e:	4649      	mov	r1, r9
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	014b      	lsls	r3, r1, #5
 800331a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800331e:	0142      	lsls	r2, r0, #5
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	ebb0 0008 	subs.w	r0, r0, r8
 8003328:	eb61 0109 	sbc.w	r1, r1, r9
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	018b      	lsls	r3, r1, #6
 8003336:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800333a:	0182      	lsls	r2, r0, #6
 800333c:	1a12      	subs	r2, r2, r0
 800333e:	eb63 0301 	sbc.w	r3, r3, r1
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	00d9      	lsls	r1, r3, #3
 800334c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003350:	00d0      	lsls	r0, r2, #3
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	eb12 0208 	adds.w	r2, r2, r8
 800335a:	eb43 0309 	adc.w	r3, r3, r9
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	0299      	lsls	r1, r3, #10
 8003368:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800336c:	0290      	lsls	r0, r2, #10
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	461a      	mov	r2, r3
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f7fc ff97 	bl	80002b0 <__aeabi_uldivmod>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4613      	mov	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800338a:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	3301      	adds	r3, #1
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	613b      	str	r3, [r7, #16]
      break;
 80033a4:	e089      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a6:	4948      	ldr	r1, [pc, #288]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80033a8:	6849      	ldr	r1, [r1, #4]
 80033aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80033ae:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b0:	4945      	ldr	r1, [pc, #276]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80033b2:	6849      	ldr	r1, [r1, #4]
 80033b4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d024      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033bc:	4942      	ldr	r1, [pc, #264]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80033be:	6849      	ldr	r1, [r1, #4]
 80033c0:	0989      	lsrs	r1, r1, #6
 80033c2:	4608      	mov	r0, r1
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033cc:	f04f 0500 	mov.w	r5, #0
 80033d0:	ea00 0204 	and.w	r2, r0, r4
 80033d4:	ea01 0305 	and.w	r3, r1, r5
 80033d8:	493d      	ldr	r1, [pc, #244]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80033da:	fb01 f003 	mul.w	r0, r1, r3
 80033de:	2100      	movs	r1, #0
 80033e0:	fb01 f102 	mul.w	r1, r1, r2
 80033e4:	1844      	adds	r4, r0, r1
 80033e6:	493a      	ldr	r1, [pc, #232]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80033e8:	fba2 0101 	umull	r0, r1, r2, r1
 80033ec:	1863      	adds	r3, r4, r1
 80033ee:	4619      	mov	r1, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	f7fc ff5a 	bl	80002b0 <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4613      	mov	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e04a      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	461a      	mov	r2, r3
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	ea02 0400 	and.w	r4, r2, r0
 800341e:	ea03 0501 	and.w	r5, r3, r1
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	014b      	lsls	r3, r1, #5
 8003430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003434:	0142      	lsls	r2, r0, #5
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	1b00      	subs	r0, r0, r4
 800343c:	eb61 0105 	sbc.w	r1, r1, r5
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	018b      	lsls	r3, r1, #6
 800344a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800344e:	0182      	lsls	r2, r0, #6
 8003450:	1a12      	subs	r2, r2, r0
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	00d9      	lsls	r1, r3, #3
 8003460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003464:	00d0      	lsls	r0, r2, #3
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	1912      	adds	r2, r2, r4
 800346c:	eb45 0303 	adc.w	r3, r5, r3
 8003470:	f04f 0000 	mov.w	r0, #0
 8003474:	f04f 0100 	mov.w	r1, #0
 8003478:	0299      	lsls	r1, r3, #10
 800347a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800347e:	0290      	lsls	r0, r2, #10
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	f7fc ff0e 	bl	80002b0 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4613      	mov	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	0f1b      	lsrs	r3, r3, #28
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	613b      	str	r3, [r7, #16]
      break;
 80034b2:	e002      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetSysClockFreq+0x2b0>)
 80034b6:	613b      	str	r3, [r7, #16]
      break;
 80034b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ba:	693b      	ldr	r3, [r7, #16]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	00f42400 	.word	0x00f42400
 80034d0:	017d7840 	.word	0x017d7840

080034d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e28d      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8083 	beq.w	80035fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034f4:	4b94      	ldr	r3, [pc, #592]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d019      	beq.n	8003534 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003500:	4b91      	ldr	r3, [pc, #580]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003508:	2b08      	cmp	r3, #8
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800350c:	4b8e      	ldr	r3, [pc, #568]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003518:	d00c      	beq.n	8003534 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d112      	bne.n	800354c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b84      	ldr	r3, [pc, #528]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x124>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d157      	bne.n	80035f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e25a      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x90>
 8003556:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7b      	ldr	r2, [pc, #492]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xcc>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0xb4>
 800356e:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b73      	ldr	r3, [pc, #460]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a72      	ldr	r2, [pc, #456]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xcc>
 8003588:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6e      	ldr	r2, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a6b      	ldr	r2, [pc, #428]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fd fdf8 	bl	800119c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fd fdf4 	bl	800119c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e21f      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xdc>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fde4 	bl	800119c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fd fde0 	bl	800119c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e20b      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	4b57      	ldr	r3, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x104>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d06f      	beq.n	80036e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003606:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d017      	beq.n	8003642 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003612:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d105      	bne.n	800362a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800361e:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x186>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1d3      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4937      	ldr	r1, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e03a      	b.n	80036e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCC_OscConfig+0x278>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fd fd8d 	bl	800119c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003686:	f7fd fd89 	bl	800119c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1b4      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4925      	ldr	r1, [pc, #148]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_RCC_OscConfig+0x278>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fd fd6c 	bl	800119c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fd fd68 	bl	800119c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e193      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d036      	beq.n	8003760 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fd fd4c 	bl	800119c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003708:	f7fd fd48 	bl	800119c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e173      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 800371c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x234>
 8003726:	e01b      	b.n	8003760 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_OscConfig+0x27c>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fd fd35 	bl	800119c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003734:	e00e      	b.n	8003754 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003736:	f7fd fd31 	bl	800119c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d907      	bls.n	8003754 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e15c      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
 8003748:	40023800 	.word	0x40023800
 800374c:	42470000 	.word	0x42470000
 8003750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	4b8a      	ldr	r3, [pc, #552]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ea      	bne.n	8003736 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8097 	beq.w	800389c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003772:	4b83      	ldr	r3, [pc, #524]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	4b7f      	ldr	r3, [pc, #508]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	4a7e      	ldr	r2, [pc, #504]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	6413      	str	r3, [r2, #64]	; 0x40
 800378e:	4b7c      	ldr	r3, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	4b79      	ldr	r3, [pc, #484]	; (8003984 <HAL_RCC_OscConfig+0x4b0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d118      	bne.n	80037dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037aa:	4b76      	ldr	r3, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x4b0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a75      	ldr	r2, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x4b0>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b6:	f7fd fcf1 	bl	800119c <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037be:	f7fd fced 	bl	800119c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e118      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <HAL_RCC_OscConfig+0x4b0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x31e>
 80037e4:	4b66      	ldr	r3, [pc, #408]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a65      	ldr	r2, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	e01c      	b.n	800382c <HAL_RCC_OscConfig+0x358>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x340>
 80037fa:	4b61      	ldr	r3, [pc, #388]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	4a60      	ldr	r2, [pc, #384]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	6713      	str	r3, [r2, #112]	; 0x70
 8003806:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a5d      	ldr	r2, [pc, #372]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0x358>
 8003814:	4b5a      	ldr	r3, [pc, #360]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a59      	ldr	r2, [pc, #356]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	4b57      	ldr	r3, [pc, #348]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a56      	ldr	r2, [pc, #344]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003826:	f023 0304 	bic.w	r3, r3, #4
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d015      	beq.n	8003860 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd fcb2 	bl	800119c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fd fcae 	bl	800119c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0d7      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003852:	4b4b      	ldr	r3, [pc, #300]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ee      	beq.n	800383c <HAL_RCC_OscConfig+0x368>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd fc9c 	bl	800119c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd fc98 	bl	800119c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0c1      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387e:	4b40      	ldr	r3, [pc, #256]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ee      	bne.n	8003868 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	4a3a      	ldr	r2, [pc, #232]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80ad 	beq.w	8003a00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d060      	beq.n	8003974 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d145      	bne.n	8003946 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b33      	ldr	r3, [pc, #204]	; (8003988 <HAL_RCC_OscConfig+0x4b4>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd fc6c 	bl	800119c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fd fc68 	bl	800119c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e093      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	4b29      	ldr	r3, [pc, #164]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	3b01      	subs	r3, #1
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	071b      	lsls	r3, r3, #28
 8003912:	491b      	ldr	r1, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x4b4>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fd fc3d 	bl	800119c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003926:	f7fd fc39 	bl	800119c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e064      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x452>
 8003944:	e05c      	b.n	8003a00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_OscConfig+0x4b4>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fd fc26 	bl	800119c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003954:	f7fd fc22 	bl	800119c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e04d      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x4ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x480>
 8003972:	e045      	b.n	8003a00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e040      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000
 8003988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800398c:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <HAL_RCC_OscConfig+0x538>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d030      	beq.n	80039fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d129      	bne.n	80039fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d122      	bne.n	80039fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d119      	bne.n	80039fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d10f      	bne.n	80039fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800

08003a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e03f      	b.n	8003aa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd f9e4 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	; 0x24
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f929 	bl	8003cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08a      	sub	sp, #40	; 0x28
 8003aae:	af02      	add	r7, sp, #8
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d17c      	bne.n	8003bc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_UART_Transmit+0x2c>
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e075      	b.n	8003bc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UART_Transmit+0x3e>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e06e      	b.n	8003bc6 <HAL_UART_Transmit+0x11c>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2221      	movs	r2, #33	; 0x21
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afe:	f7fd fb4d 	bl	800119c <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d108      	bne.n	8003b2c <HAL_UART_Transmit+0x82>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e003      	b.n	8003b34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b3c:	e02a      	b.n	8003b94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f840 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e036      	b.n	8003bc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3302      	adds	r3, #2
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e007      	b.n	8003b86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	3301      	adds	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1cf      	bne.n	8003b3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2140      	movs	r1, #64	; 0x40
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f810 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e006      	b.n	8003bc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b090      	sub	sp, #64	; 0x40
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	e050      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d04c      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8003bee:	f7fd fad5 	bl	800119c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d241      	bcs.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c1e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	613b      	str	r3, [r7, #16]
   return(result);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c52:	623a      	str	r2, [r7, #32]
 8003c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e00f      	b.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d09f      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3740      	adds	r7, #64	; 0x40
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	b09f      	sub	sp, #124	; 0x7c
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	ea40 0301 	orr.w	r3, r0, r1
 8003ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cf0:	f021 010c 	bic.w	r1, r1, #12
 8003cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0a:	6999      	ldr	r1, [r3, #24]
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	ea40 0301 	orr.w	r3, r0, r1
 8003d14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4bc5      	ldr	r3, [pc, #788]	; (8004030 <UART_SetConfig+0x384>)
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d004      	beq.n	8003d2a <UART_SetConfig+0x7e>
 8003d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4bc3      	ldr	r3, [pc, #780]	; (8004034 <UART_SetConfig+0x388>)
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d103      	bne.n	8003d32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d2a:	f7ff fa63 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8003d2e:	6778      	str	r0, [r7, #116]	; 0x74
 8003d30:	e002      	b.n	8003d38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d32:	f7ff fa4b 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8003d36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d40:	f040 80b6 	bne.w	8003eb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d46:	461c      	mov	r4, r3
 8003d48:	f04f 0500 	mov.w	r5, #0
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	462b      	mov	r3, r5
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	6439      	str	r1, [r7, #64]	; 0x40
 8003d54:	415b      	adcs	r3, r3
 8003d56:	647b      	str	r3, [r7, #68]	; 0x44
 8003d58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d5c:	1912      	adds	r2, r2, r4
 8003d5e:	eb45 0303 	adc.w	r3, r5, r3
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	00d9      	lsls	r1, r3, #3
 8003d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d70:	00d0      	lsls	r0, r2, #3
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	1911      	adds	r1, r2, r4
 8003d78:	6639      	str	r1, [r7, #96]	; 0x60
 8003d7a:	416b      	adcs	r3, r5
 8003d7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	1891      	adds	r1, r2, r2
 8003d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d98:	f7fc fa8a 	bl	80002b0 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4ba5      	ldr	r3, [pc, #660]	; (8004038 <UART_SetConfig+0x38c>)
 8003da2:	fba3 2302 	umull	r2, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	011e      	lsls	r6, r3, #4
 8003daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dac:	461c      	mov	r4, r3
 8003dae:	f04f 0500 	mov.w	r5, #0
 8003db2:	4622      	mov	r2, r4
 8003db4:	462b      	mov	r3, r5
 8003db6:	1891      	adds	r1, r2, r2
 8003db8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dba:	415b      	adcs	r3, r3
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dc2:	1912      	adds	r2, r2, r4
 8003dc4:	eb45 0303 	adc.w	r3, r5, r3
 8003dc8:	f04f 0000 	mov.w	r0, #0
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	00d9      	lsls	r1, r3, #3
 8003dd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd6:	00d0      	lsls	r0, r2, #3
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	1911      	adds	r1, r2, r4
 8003dde:	65b9      	str	r1, [r7, #88]	; 0x58
 8003de0:	416b      	adcs	r3, r5
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003df2:	415b      	adcs	r3, r3
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dfe:	f7fc fa57 	bl	80002b0 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4b8c      	ldr	r3, [pc, #560]	; (8004038 <UART_SetConfig+0x38c>)
 8003e08:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	2164      	movs	r1, #100	; 0x64
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	3332      	adds	r3, #50	; 0x32
 8003e1a:	4a87      	ldr	r2, [pc, #540]	; (8004038 <UART_SetConfig+0x38c>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e28:	441e      	add	r6, r3
 8003e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	1894      	adds	r4, r2, r2
 8003e38:	623c      	str	r4, [r7, #32]
 8003e3a:	415b      	adcs	r3, r3
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e42:	1812      	adds	r2, r2, r0
 8003e44:	eb41 0303 	adc.w	r3, r1, r3
 8003e48:	f04f 0400 	mov.w	r4, #0
 8003e4c:	f04f 0500 	mov.w	r5, #0
 8003e50:	00dd      	lsls	r5, r3, #3
 8003e52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e56:	00d4      	lsls	r4, r2, #3
 8003e58:	4622      	mov	r2, r4
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	1814      	adds	r4, r2, r0
 8003e5e:	653c      	str	r4, [r7, #80]	; 0x50
 8003e60:	414b      	adcs	r3, r1
 8003e62:	657b      	str	r3, [r7, #84]	; 0x54
 8003e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	1891      	adds	r1, r2, r2
 8003e70:	61b9      	str	r1, [r7, #24]
 8003e72:	415b      	adcs	r3, r3
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e7e:	f7fc fa17 	bl	80002b0 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <UART_SetConfig+0x38c>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	2164      	movs	r1, #100	; 0x64
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3332      	adds	r3, #50	; 0x32
 8003e9a:	4a67      	ldr	r2, [pc, #412]	; (8004038 <UART_SetConfig+0x38c>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	f003 0207 	and.w	r2, r3, #7
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4432      	add	r2, r6
 8003eac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003eae:	e0b9      	b.n	8004024 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb2:	461c      	mov	r4, r3
 8003eb4:	f04f 0500 	mov.w	r5, #0
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	6139      	str	r1, [r7, #16]
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ec8:	1912      	adds	r2, r2, r4
 8003eca:	eb45 0303 	adc.w	r3, r5, r3
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	00d9      	lsls	r1, r3, #3
 8003ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003edc:	00d0      	lsls	r0, r2, #3
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	eb12 0804 	adds.w	r8, r2, r4
 8003ee6:	eb43 0905 	adc.w	r9, r3, r5
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	008b      	lsls	r3, r1, #2
 8003efe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f02:	0082      	lsls	r2, r0, #2
 8003f04:	4640      	mov	r0, r8
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc f9d2 	bl	80002b0 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4b49      	ldr	r3, [pc, #292]	; (8004038 <UART_SetConfig+0x38c>)
 8003f12:	fba3 2302 	umull	r2, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	011e      	lsls	r6, r3, #4
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	1894      	adds	r4, r2, r2
 8003f28:	60bc      	str	r4, [r7, #8]
 8003f2a:	415b      	adcs	r3, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f32:	1812      	adds	r2, r2, r0
 8003f34:	eb41 0303 	adc.w	r3, r1, r3
 8003f38:	f04f 0400 	mov.w	r4, #0
 8003f3c:	f04f 0500 	mov.w	r5, #0
 8003f40:	00dd      	lsls	r5, r3, #3
 8003f42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f46:	00d4      	lsls	r4, r2, #3
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	1814      	adds	r4, r2, r0
 8003f4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f50:	414b      	adcs	r3, r1
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f6c:	0082      	lsls	r2, r0, #2
 8003f6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f72:	f7fc f99d 	bl	80002b0 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <UART_SetConfig+0x38c>)
 8003f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	2164      	movs	r1, #100	; 0x64
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	3332      	adds	r3, #50	; 0x32
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <UART_SetConfig+0x38c>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f9a:	441e      	add	r6, r3
 8003f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	1894      	adds	r4, r2, r2
 8003faa:	603c      	str	r4, [r7, #0]
 8003fac:	415b      	adcs	r3, r3
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb4:	1812      	adds	r2, r2, r0
 8003fb6:	eb41 0303 	adc.w	r3, r1, r3
 8003fba:	f04f 0400 	mov.w	r4, #0
 8003fbe:	f04f 0500 	mov.w	r5, #0
 8003fc2:	00dd      	lsls	r5, r3, #3
 8003fc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fc8:	00d4      	lsls	r4, r2, #3
 8003fca:	4622      	mov	r2, r4
 8003fcc:	462b      	mov	r3, r5
 8003fce:	eb12 0a00 	adds.w	sl, r2, r0
 8003fd2:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	008b      	lsls	r3, r1, #2
 8003fea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fee:	0082      	lsls	r2, r0, #2
 8003ff0:	4650      	mov	r0, sl
 8003ff2:	4659      	mov	r1, fp
 8003ff4:	f7fc f95c 	bl	80002b0 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <UART_SetConfig+0x38c>)
 8003ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2164      	movs	r1, #100	; 0x64
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3332      	adds	r3, #50	; 0x32
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <UART_SetConfig+0x38c>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4432      	add	r2, r6
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	377c      	adds	r7, #124	; 0x7c
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	bf00      	nop
 8004030:	40011000 	.word	0x40011000
 8004034:	40011400 	.word	0x40011400
 8004038:	51eb851f 	.word	0x51eb851f

0800403c <__errno>:
 800403c:	4b01      	ldr	r3, [pc, #4]	; (8004044 <__errno+0x8>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4d0d      	ldr	r5, [pc, #52]	; (8004080 <__libc_init_array+0x38>)
 800404c:	4c0d      	ldr	r4, [pc, #52]	; (8004084 <__libc_init_array+0x3c>)
 800404e:	1b64      	subs	r4, r4, r5
 8004050:	10a4      	asrs	r4, r4, #2
 8004052:	2600      	movs	r6, #0
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	4d0b      	ldr	r5, [pc, #44]	; (8004088 <__libc_init_array+0x40>)
 800405a:	4c0c      	ldr	r4, [pc, #48]	; (800408c <__libc_init_array+0x44>)
 800405c:	f000 ff86 	bl	8004f6c <_init>
 8004060:	1b64      	subs	r4, r4, r5
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	2600      	movs	r6, #0
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	f855 3b04 	ldr.w	r3, [r5], #4
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	08005178 	.word	0x08005178
 8004084:	08005178 	.word	0x08005178
 8004088:	08005178 	.word	0x08005178
 800408c:	0800517c 	.word	0x0800517c

08004090 <malloc>:
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <malloc+0xc>)
 8004092:	4601      	mov	r1, r0
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f000 b863 	b.w	8004160 <_malloc_r>
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <free>:
 80040a0:	4b02      	ldr	r3, [pc, #8]	; (80040ac <free+0xc>)
 80040a2:	4601      	mov	r1, r0
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	f000 b80b 	b.w	80040c0 <_free_r>
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <memset>:
 80040b0:	4402      	add	r2, r0
 80040b2:	4603      	mov	r3, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <_free_r>:
 80040c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040c2:	2900      	cmp	r1, #0
 80040c4:	d048      	beq.n	8004158 <_free_r+0x98>
 80040c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ca:	9001      	str	r0, [sp, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f1a1 0404 	sub.w	r4, r1, #4
 80040d2:	bfb8      	it	lt
 80040d4:	18e4      	addlt	r4, r4, r3
 80040d6:	f000 f9bd 	bl	8004454 <__malloc_lock>
 80040da:	4a20      	ldr	r2, [pc, #128]	; (800415c <_free_r+0x9c>)
 80040dc:	9801      	ldr	r0, [sp, #4]
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	4615      	mov	r5, r2
 80040e2:	b933      	cbnz	r3, 80040f2 <_free_r+0x32>
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	6014      	str	r4, [r2, #0]
 80040e8:	b003      	add	sp, #12
 80040ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040ee:	f000 b9b7 	b.w	8004460 <__malloc_unlock>
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	d90b      	bls.n	800410e <_free_r+0x4e>
 80040f6:	6821      	ldr	r1, [r4, #0]
 80040f8:	1862      	adds	r2, r4, r1
 80040fa:	4293      	cmp	r3, r2
 80040fc:	bf04      	itt	eq
 80040fe:	681a      	ldreq	r2, [r3, #0]
 8004100:	685b      	ldreq	r3, [r3, #4]
 8004102:	6063      	str	r3, [r4, #4]
 8004104:	bf04      	itt	eq
 8004106:	1852      	addeq	r2, r2, r1
 8004108:	6022      	streq	r2, [r4, #0]
 800410a:	602c      	str	r4, [r5, #0]
 800410c:	e7ec      	b.n	80040e8 <_free_r+0x28>
 800410e:	461a      	mov	r2, r3
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	b10b      	cbz	r3, 8004118 <_free_r+0x58>
 8004114:	42a3      	cmp	r3, r4
 8004116:	d9fa      	bls.n	800410e <_free_r+0x4e>
 8004118:	6811      	ldr	r1, [r2, #0]
 800411a:	1855      	adds	r5, r2, r1
 800411c:	42a5      	cmp	r5, r4
 800411e:	d10b      	bne.n	8004138 <_free_r+0x78>
 8004120:	6824      	ldr	r4, [r4, #0]
 8004122:	4421      	add	r1, r4
 8004124:	1854      	adds	r4, r2, r1
 8004126:	42a3      	cmp	r3, r4
 8004128:	6011      	str	r1, [r2, #0]
 800412a:	d1dd      	bne.n	80040e8 <_free_r+0x28>
 800412c:	681c      	ldr	r4, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	6053      	str	r3, [r2, #4]
 8004132:	4421      	add	r1, r4
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	e7d7      	b.n	80040e8 <_free_r+0x28>
 8004138:	d902      	bls.n	8004140 <_free_r+0x80>
 800413a:	230c      	movs	r3, #12
 800413c:	6003      	str	r3, [r0, #0]
 800413e:	e7d3      	b.n	80040e8 <_free_r+0x28>
 8004140:	6825      	ldr	r5, [r4, #0]
 8004142:	1961      	adds	r1, r4, r5
 8004144:	428b      	cmp	r3, r1
 8004146:	bf04      	itt	eq
 8004148:	6819      	ldreq	r1, [r3, #0]
 800414a:	685b      	ldreq	r3, [r3, #4]
 800414c:	6063      	str	r3, [r4, #4]
 800414e:	bf04      	itt	eq
 8004150:	1949      	addeq	r1, r1, r5
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	6054      	str	r4, [r2, #4]
 8004156:	e7c7      	b.n	80040e8 <_free_r+0x28>
 8004158:	b003      	add	sp, #12
 800415a:	bd30      	pop	{r4, r5, pc}
 800415c:	20000090 	.word	0x20000090

08004160 <_malloc_r>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	1ccd      	adds	r5, r1, #3
 8004164:	f025 0503 	bic.w	r5, r5, #3
 8004168:	3508      	adds	r5, #8
 800416a:	2d0c      	cmp	r5, #12
 800416c:	bf38      	it	cc
 800416e:	250c      	movcc	r5, #12
 8004170:	2d00      	cmp	r5, #0
 8004172:	4606      	mov	r6, r0
 8004174:	db01      	blt.n	800417a <_malloc_r+0x1a>
 8004176:	42a9      	cmp	r1, r5
 8004178:	d903      	bls.n	8004182 <_malloc_r+0x22>
 800417a:	230c      	movs	r3, #12
 800417c:	6033      	str	r3, [r6, #0]
 800417e:	2000      	movs	r0, #0
 8004180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004182:	f000 f967 	bl	8004454 <__malloc_lock>
 8004186:	4921      	ldr	r1, [pc, #132]	; (800420c <_malloc_r+0xac>)
 8004188:	680a      	ldr	r2, [r1, #0]
 800418a:	4614      	mov	r4, r2
 800418c:	b99c      	cbnz	r4, 80041b6 <_malloc_r+0x56>
 800418e:	4f20      	ldr	r7, [pc, #128]	; (8004210 <_malloc_r+0xb0>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	b923      	cbnz	r3, 800419e <_malloc_r+0x3e>
 8004194:	4621      	mov	r1, r4
 8004196:	4630      	mov	r0, r6
 8004198:	f000 f854 	bl	8004244 <_sbrk_r>
 800419c:	6038      	str	r0, [r7, #0]
 800419e:	4629      	mov	r1, r5
 80041a0:	4630      	mov	r0, r6
 80041a2:	f000 f84f 	bl	8004244 <_sbrk_r>
 80041a6:	1c43      	adds	r3, r0, #1
 80041a8:	d123      	bne.n	80041f2 <_malloc_r+0x92>
 80041aa:	230c      	movs	r3, #12
 80041ac:	6033      	str	r3, [r6, #0]
 80041ae:	4630      	mov	r0, r6
 80041b0:	f000 f956 	bl	8004460 <__malloc_unlock>
 80041b4:	e7e3      	b.n	800417e <_malloc_r+0x1e>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	1b5b      	subs	r3, r3, r5
 80041ba:	d417      	bmi.n	80041ec <_malloc_r+0x8c>
 80041bc:	2b0b      	cmp	r3, #11
 80041be:	d903      	bls.n	80041c8 <_malloc_r+0x68>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	441c      	add	r4, r3
 80041c4:	6025      	str	r5, [r4, #0]
 80041c6:	e004      	b.n	80041d2 <_malloc_r+0x72>
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	42a2      	cmp	r2, r4
 80041cc:	bf0c      	ite	eq
 80041ce:	600b      	streq	r3, [r1, #0]
 80041d0:	6053      	strne	r3, [r2, #4]
 80041d2:	4630      	mov	r0, r6
 80041d4:	f000 f944 	bl	8004460 <__malloc_unlock>
 80041d8:	f104 000b 	add.w	r0, r4, #11
 80041dc:	1d23      	adds	r3, r4, #4
 80041de:	f020 0007 	bic.w	r0, r0, #7
 80041e2:	1ac2      	subs	r2, r0, r3
 80041e4:	d0cc      	beq.n	8004180 <_malloc_r+0x20>
 80041e6:	1a1b      	subs	r3, r3, r0
 80041e8:	50a3      	str	r3, [r4, r2]
 80041ea:	e7c9      	b.n	8004180 <_malloc_r+0x20>
 80041ec:	4622      	mov	r2, r4
 80041ee:	6864      	ldr	r4, [r4, #4]
 80041f0:	e7cc      	b.n	800418c <_malloc_r+0x2c>
 80041f2:	1cc4      	adds	r4, r0, #3
 80041f4:	f024 0403 	bic.w	r4, r4, #3
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d0e3      	beq.n	80041c4 <_malloc_r+0x64>
 80041fc:	1a21      	subs	r1, r4, r0
 80041fe:	4630      	mov	r0, r6
 8004200:	f000 f820 	bl	8004244 <_sbrk_r>
 8004204:	3001      	adds	r0, #1
 8004206:	d1dd      	bne.n	80041c4 <_malloc_r+0x64>
 8004208:	e7cf      	b.n	80041aa <_malloc_r+0x4a>
 800420a:	bf00      	nop
 800420c:	20000090 	.word	0x20000090
 8004210:	20000094 	.word	0x20000094

08004214 <iprintf>:
 8004214:	b40f      	push	{r0, r1, r2, r3}
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <iprintf+0x2c>)
 8004218:	b513      	push	{r0, r1, r4, lr}
 800421a:	681c      	ldr	r4, [r3, #0]
 800421c:	b124      	cbz	r4, 8004228 <iprintf+0x14>
 800421e:	69a3      	ldr	r3, [r4, #24]
 8004220:	b913      	cbnz	r3, 8004228 <iprintf+0x14>
 8004222:	4620      	mov	r0, r4
 8004224:	f000 f876 	bl	8004314 <__sinit>
 8004228:	ab05      	add	r3, sp, #20
 800422a:	9a04      	ldr	r2, [sp, #16]
 800422c:	68a1      	ldr	r1, [r4, #8]
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	4620      	mov	r0, r4
 8004232:	f000 f945 	bl	80044c0 <_vfiprintf_r>
 8004236:	b002      	add	sp, #8
 8004238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800423c:	b004      	add	sp, #16
 800423e:	4770      	bx	lr
 8004240:	2000000c 	.word	0x2000000c

08004244 <_sbrk_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4d06      	ldr	r5, [pc, #24]	; (8004260 <_sbrk_r+0x1c>)
 8004248:	2300      	movs	r3, #0
 800424a:	4604      	mov	r4, r0
 800424c:	4608      	mov	r0, r1
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	f7fc fecc 	bl	8000fec <_sbrk>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d102      	bne.n	800425e <_sbrk_r+0x1a>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	b103      	cbz	r3, 800425e <_sbrk_r+0x1a>
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	20000298 	.word	0x20000298

08004264 <std>:
 8004264:	2300      	movs	r3, #0
 8004266:	b510      	push	{r4, lr}
 8004268:	4604      	mov	r4, r0
 800426a:	e9c0 3300 	strd	r3, r3, [r0]
 800426e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004272:	6083      	str	r3, [r0, #8]
 8004274:	8181      	strh	r1, [r0, #12]
 8004276:	6643      	str	r3, [r0, #100]	; 0x64
 8004278:	81c2      	strh	r2, [r0, #14]
 800427a:	6183      	str	r3, [r0, #24]
 800427c:	4619      	mov	r1, r3
 800427e:	2208      	movs	r2, #8
 8004280:	305c      	adds	r0, #92	; 0x5c
 8004282:	f7ff ff15 	bl	80040b0 <memset>
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <std+0x38>)
 8004288:	6263      	str	r3, [r4, #36]	; 0x24
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <std+0x3c>)
 800428c:	62a3      	str	r3, [r4, #40]	; 0x28
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <std+0x40>)
 8004290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <std+0x44>)
 8004294:	6224      	str	r4, [r4, #32]
 8004296:	6323      	str	r3, [r4, #48]	; 0x30
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	08004a49 	.word	0x08004a49
 80042a0:	08004a6b 	.word	0x08004a6b
 80042a4:	08004aa3 	.word	0x08004aa3
 80042a8:	08004ac7 	.word	0x08004ac7

080042ac <_cleanup_r>:
 80042ac:	4901      	ldr	r1, [pc, #4]	; (80042b4 <_cleanup_r+0x8>)
 80042ae:	f000 b8af 	b.w	8004410 <_fwalk_reent>
 80042b2:	bf00      	nop
 80042b4:	08004da1 	.word	0x08004da1

080042b8 <__sfmoreglue>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	1e4a      	subs	r2, r1, #1
 80042bc:	2568      	movs	r5, #104	; 0x68
 80042be:	4355      	muls	r5, r2
 80042c0:	460e      	mov	r6, r1
 80042c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042c6:	f7ff ff4b 	bl	8004160 <_malloc_r>
 80042ca:	4604      	mov	r4, r0
 80042cc:	b140      	cbz	r0, 80042e0 <__sfmoreglue+0x28>
 80042ce:	2100      	movs	r1, #0
 80042d0:	e9c0 1600 	strd	r1, r6, [r0]
 80042d4:	300c      	adds	r0, #12
 80042d6:	60a0      	str	r0, [r4, #8]
 80042d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042dc:	f7ff fee8 	bl	80040b0 <memset>
 80042e0:	4620      	mov	r0, r4
 80042e2:	bd70      	pop	{r4, r5, r6, pc}

080042e4 <__sfp_lock_acquire>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__sfp_lock_acquire+0x8>)
 80042e6:	f000 b8b3 	b.w	8004450 <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000294 	.word	0x20000294

080042f0 <__sfp_lock_release>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__sfp_lock_release+0x8>)
 80042f2:	f000 b8ae 	b.w	8004452 <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000294 	.word	0x20000294

080042fc <__sinit_lock_acquire>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__sinit_lock_acquire+0x8>)
 80042fe:	f000 b8a7 	b.w	8004450 <__retarget_lock_acquire_recursive>
 8004302:	bf00      	nop
 8004304:	2000028f 	.word	0x2000028f

08004308 <__sinit_lock_release>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__sinit_lock_release+0x8>)
 800430a:	f000 b8a2 	b.w	8004452 <__retarget_lock_release_recursive>
 800430e:	bf00      	nop
 8004310:	2000028f 	.word	0x2000028f

08004314 <__sinit>:
 8004314:	b510      	push	{r4, lr}
 8004316:	4604      	mov	r4, r0
 8004318:	f7ff fff0 	bl	80042fc <__sinit_lock_acquire>
 800431c:	69a3      	ldr	r3, [r4, #24]
 800431e:	b11b      	cbz	r3, 8004328 <__sinit+0x14>
 8004320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004324:	f7ff bff0 	b.w	8004308 <__sinit_lock_release>
 8004328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800432c:	6523      	str	r3, [r4, #80]	; 0x50
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <__sinit+0x68>)
 8004330:	4a13      	ldr	r2, [pc, #76]	; (8004380 <__sinit+0x6c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	62a2      	str	r2, [r4, #40]	; 0x28
 8004336:	42a3      	cmp	r3, r4
 8004338:	bf04      	itt	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	61a3      	streq	r3, [r4, #24]
 800433e:	4620      	mov	r0, r4
 8004340:	f000 f820 	bl	8004384 <__sfp>
 8004344:	6060      	str	r0, [r4, #4]
 8004346:	4620      	mov	r0, r4
 8004348:	f000 f81c 	bl	8004384 <__sfp>
 800434c:	60a0      	str	r0, [r4, #8]
 800434e:	4620      	mov	r0, r4
 8004350:	f000 f818 	bl	8004384 <__sfp>
 8004354:	2200      	movs	r2, #0
 8004356:	60e0      	str	r0, [r4, #12]
 8004358:	2104      	movs	r1, #4
 800435a:	6860      	ldr	r0, [r4, #4]
 800435c:	f7ff ff82 	bl	8004264 <std>
 8004360:	68a0      	ldr	r0, [r4, #8]
 8004362:	2201      	movs	r2, #1
 8004364:	2109      	movs	r1, #9
 8004366:	f7ff ff7d 	bl	8004264 <std>
 800436a:	68e0      	ldr	r0, [r4, #12]
 800436c:	2202      	movs	r2, #2
 800436e:	2112      	movs	r1, #18
 8004370:	f7ff ff78 	bl	8004264 <std>
 8004374:	2301      	movs	r3, #1
 8004376:	61a3      	str	r3, [r4, #24]
 8004378:	e7d2      	b.n	8004320 <__sinit+0xc>
 800437a:	bf00      	nop
 800437c:	080050d8 	.word	0x080050d8
 8004380:	080042ad 	.word	0x080042ad

08004384 <__sfp>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	4607      	mov	r7, r0
 8004388:	f7ff ffac 	bl	80042e4 <__sfp_lock_acquire>
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <__sfp+0x84>)
 800438e:	681e      	ldr	r6, [r3, #0]
 8004390:	69b3      	ldr	r3, [r6, #24]
 8004392:	b913      	cbnz	r3, 800439a <__sfp+0x16>
 8004394:	4630      	mov	r0, r6
 8004396:	f7ff ffbd 	bl	8004314 <__sinit>
 800439a:	3648      	adds	r6, #72	; 0x48
 800439c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	d503      	bpl.n	80043ac <__sfp+0x28>
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	b30b      	cbz	r3, 80043ec <__sfp+0x68>
 80043a8:	6836      	ldr	r6, [r6, #0]
 80043aa:	e7f7      	b.n	800439c <__sfp+0x18>
 80043ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043b0:	b9d5      	cbnz	r5, 80043e8 <__sfp+0x64>
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <__sfp+0x88>)
 80043b4:	60e3      	str	r3, [r4, #12]
 80043b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043ba:	6665      	str	r5, [r4, #100]	; 0x64
 80043bc:	f000 f847 	bl	800444e <__retarget_lock_init_recursive>
 80043c0:	f7ff ff96 	bl	80042f0 <__sfp_lock_release>
 80043c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043cc:	6025      	str	r5, [r4, #0]
 80043ce:	61a5      	str	r5, [r4, #24]
 80043d0:	2208      	movs	r2, #8
 80043d2:	4629      	mov	r1, r5
 80043d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043d8:	f7ff fe6a 	bl	80040b0 <memset>
 80043dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043e4:	4620      	mov	r0, r4
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e8:	3468      	adds	r4, #104	; 0x68
 80043ea:	e7d9      	b.n	80043a0 <__sfp+0x1c>
 80043ec:	2104      	movs	r1, #4
 80043ee:	4638      	mov	r0, r7
 80043f0:	f7ff ff62 	bl	80042b8 <__sfmoreglue>
 80043f4:	4604      	mov	r4, r0
 80043f6:	6030      	str	r0, [r6, #0]
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d1d5      	bne.n	80043a8 <__sfp+0x24>
 80043fc:	f7ff ff78 	bl	80042f0 <__sfp_lock_release>
 8004400:	230c      	movs	r3, #12
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	e7ee      	b.n	80043e4 <__sfp+0x60>
 8004406:	bf00      	nop
 8004408:	080050d8 	.word	0x080050d8
 800440c:	ffff0001 	.word	0xffff0001

08004410 <_fwalk_reent>:
 8004410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004414:	4606      	mov	r6, r0
 8004416:	4688      	mov	r8, r1
 8004418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800441c:	2700      	movs	r7, #0
 800441e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004422:	f1b9 0901 	subs.w	r9, r9, #1
 8004426:	d505      	bpl.n	8004434 <_fwalk_reent+0x24>
 8004428:	6824      	ldr	r4, [r4, #0]
 800442a:	2c00      	cmp	r4, #0
 800442c:	d1f7      	bne.n	800441e <_fwalk_reent+0xe>
 800442e:	4638      	mov	r0, r7
 8004430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004434:	89ab      	ldrh	r3, [r5, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d907      	bls.n	800444a <_fwalk_reent+0x3a>
 800443a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800443e:	3301      	adds	r3, #1
 8004440:	d003      	beq.n	800444a <_fwalk_reent+0x3a>
 8004442:	4629      	mov	r1, r5
 8004444:	4630      	mov	r0, r6
 8004446:	47c0      	blx	r8
 8004448:	4307      	orrs	r7, r0
 800444a:	3568      	adds	r5, #104	; 0x68
 800444c:	e7e9      	b.n	8004422 <_fwalk_reent+0x12>

0800444e <__retarget_lock_init_recursive>:
 800444e:	4770      	bx	lr

08004450 <__retarget_lock_acquire_recursive>:
 8004450:	4770      	bx	lr

08004452 <__retarget_lock_release_recursive>:
 8004452:	4770      	bx	lr

08004454 <__malloc_lock>:
 8004454:	4801      	ldr	r0, [pc, #4]	; (800445c <__malloc_lock+0x8>)
 8004456:	f7ff bffb 	b.w	8004450 <__retarget_lock_acquire_recursive>
 800445a:	bf00      	nop
 800445c:	20000290 	.word	0x20000290

08004460 <__malloc_unlock>:
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <__malloc_unlock+0x8>)
 8004462:	f7ff bff6 	b.w	8004452 <__retarget_lock_release_recursive>
 8004466:	bf00      	nop
 8004468:	20000290 	.word	0x20000290

0800446c <__sfputc_r>:
 800446c:	6893      	ldr	r3, [r2, #8]
 800446e:	3b01      	subs	r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	b410      	push	{r4}
 8004474:	6093      	str	r3, [r2, #8]
 8004476:	da08      	bge.n	800448a <__sfputc_r+0x1e>
 8004478:	6994      	ldr	r4, [r2, #24]
 800447a:	42a3      	cmp	r3, r4
 800447c:	db01      	blt.n	8004482 <__sfputc_r+0x16>
 800447e:	290a      	cmp	r1, #10
 8004480:	d103      	bne.n	800448a <__sfputc_r+0x1e>
 8004482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004486:	f000 bb23 	b.w	8004ad0 <__swbuf_r>
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	1c58      	adds	r0, r3, #1
 800448e:	6010      	str	r0, [r2, #0]
 8004490:	7019      	strb	r1, [r3, #0]
 8004492:	4608      	mov	r0, r1
 8004494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004498:	4770      	bx	lr

0800449a <__sfputs_r>:
 800449a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449c:	4606      	mov	r6, r0
 800449e:	460f      	mov	r7, r1
 80044a0:	4614      	mov	r4, r2
 80044a2:	18d5      	adds	r5, r2, r3
 80044a4:	42ac      	cmp	r4, r5
 80044a6:	d101      	bne.n	80044ac <__sfputs_r+0x12>
 80044a8:	2000      	movs	r0, #0
 80044aa:	e007      	b.n	80044bc <__sfputs_r+0x22>
 80044ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b0:	463a      	mov	r2, r7
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ffda 	bl	800446c <__sfputc_r>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d1f3      	bne.n	80044a4 <__sfputs_r+0xa>
 80044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044c0 <_vfiprintf_r>:
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	460d      	mov	r5, r1
 80044c6:	b09d      	sub	sp, #116	; 0x74
 80044c8:	4614      	mov	r4, r2
 80044ca:	4698      	mov	r8, r3
 80044cc:	4606      	mov	r6, r0
 80044ce:	b118      	cbz	r0, 80044d8 <_vfiprintf_r+0x18>
 80044d0:	6983      	ldr	r3, [r0, #24]
 80044d2:	b90b      	cbnz	r3, 80044d8 <_vfiprintf_r+0x18>
 80044d4:	f7ff ff1e 	bl	8004314 <__sinit>
 80044d8:	4b89      	ldr	r3, [pc, #548]	; (8004700 <_vfiprintf_r+0x240>)
 80044da:	429d      	cmp	r5, r3
 80044dc:	d11b      	bne.n	8004516 <_vfiprintf_r+0x56>
 80044de:	6875      	ldr	r5, [r6, #4]
 80044e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044e2:	07d9      	lsls	r1, r3, #31
 80044e4:	d405      	bmi.n	80044f2 <_vfiprintf_r+0x32>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	059a      	lsls	r2, r3, #22
 80044ea:	d402      	bmi.n	80044f2 <_vfiprintf_r+0x32>
 80044ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ee:	f7ff ffaf 	bl	8004450 <__retarget_lock_acquire_recursive>
 80044f2:	89ab      	ldrh	r3, [r5, #12]
 80044f4:	071b      	lsls	r3, r3, #28
 80044f6:	d501      	bpl.n	80044fc <_vfiprintf_r+0x3c>
 80044f8:	692b      	ldr	r3, [r5, #16]
 80044fa:	b9eb      	cbnz	r3, 8004538 <_vfiprintf_r+0x78>
 80044fc:	4629      	mov	r1, r5
 80044fe:	4630      	mov	r0, r6
 8004500:	f000 fb4a 	bl	8004b98 <__swsetup_r>
 8004504:	b1c0      	cbz	r0, 8004538 <_vfiprintf_r+0x78>
 8004506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004508:	07dc      	lsls	r4, r3, #31
 800450a:	d50e      	bpl.n	800452a <_vfiprintf_r+0x6a>
 800450c:	f04f 30ff 	mov.w	r0, #4294967295
 8004510:	b01d      	add	sp, #116	; 0x74
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004516:	4b7b      	ldr	r3, [pc, #492]	; (8004704 <_vfiprintf_r+0x244>)
 8004518:	429d      	cmp	r5, r3
 800451a:	d101      	bne.n	8004520 <_vfiprintf_r+0x60>
 800451c:	68b5      	ldr	r5, [r6, #8]
 800451e:	e7df      	b.n	80044e0 <_vfiprintf_r+0x20>
 8004520:	4b79      	ldr	r3, [pc, #484]	; (8004708 <_vfiprintf_r+0x248>)
 8004522:	429d      	cmp	r5, r3
 8004524:	bf08      	it	eq
 8004526:	68f5      	ldreq	r5, [r6, #12]
 8004528:	e7da      	b.n	80044e0 <_vfiprintf_r+0x20>
 800452a:	89ab      	ldrh	r3, [r5, #12]
 800452c:	0598      	lsls	r0, r3, #22
 800452e:	d4ed      	bmi.n	800450c <_vfiprintf_r+0x4c>
 8004530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004532:	f7ff ff8e 	bl	8004452 <__retarget_lock_release_recursive>
 8004536:	e7e9      	b.n	800450c <_vfiprintf_r+0x4c>
 8004538:	2300      	movs	r3, #0
 800453a:	9309      	str	r3, [sp, #36]	; 0x24
 800453c:	2320      	movs	r3, #32
 800453e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004542:	f8cd 800c 	str.w	r8, [sp, #12]
 8004546:	2330      	movs	r3, #48	; 0x30
 8004548:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800470c <_vfiprintf_r+0x24c>
 800454c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004550:	f04f 0901 	mov.w	r9, #1
 8004554:	4623      	mov	r3, r4
 8004556:	469a      	mov	sl, r3
 8004558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800455c:	b10a      	cbz	r2, 8004562 <_vfiprintf_r+0xa2>
 800455e:	2a25      	cmp	r2, #37	; 0x25
 8004560:	d1f9      	bne.n	8004556 <_vfiprintf_r+0x96>
 8004562:	ebba 0b04 	subs.w	fp, sl, r4
 8004566:	d00b      	beq.n	8004580 <_vfiprintf_r+0xc0>
 8004568:	465b      	mov	r3, fp
 800456a:	4622      	mov	r2, r4
 800456c:	4629      	mov	r1, r5
 800456e:	4630      	mov	r0, r6
 8004570:	f7ff ff93 	bl	800449a <__sfputs_r>
 8004574:	3001      	adds	r0, #1
 8004576:	f000 80aa 	beq.w	80046ce <_vfiprintf_r+0x20e>
 800457a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800457c:	445a      	add	r2, fp
 800457e:	9209      	str	r2, [sp, #36]	; 0x24
 8004580:	f89a 3000 	ldrb.w	r3, [sl]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80a2 	beq.w	80046ce <_vfiprintf_r+0x20e>
 800458a:	2300      	movs	r3, #0
 800458c:	f04f 32ff 	mov.w	r2, #4294967295
 8004590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004594:	f10a 0a01 	add.w	sl, sl, #1
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	9307      	str	r3, [sp, #28]
 800459c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045a0:	931a      	str	r3, [sp, #104]	; 0x68
 80045a2:	4654      	mov	r4, sl
 80045a4:	2205      	movs	r2, #5
 80045a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045aa:	4858      	ldr	r0, [pc, #352]	; (800470c <_vfiprintf_r+0x24c>)
 80045ac:	f7fb fe30 	bl	8000210 <memchr>
 80045b0:	9a04      	ldr	r2, [sp, #16]
 80045b2:	b9d8      	cbnz	r0, 80045ec <_vfiprintf_r+0x12c>
 80045b4:	06d1      	lsls	r1, r2, #27
 80045b6:	bf44      	itt	mi
 80045b8:	2320      	movmi	r3, #32
 80045ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045be:	0713      	lsls	r3, r2, #28
 80045c0:	bf44      	itt	mi
 80045c2:	232b      	movmi	r3, #43	; 0x2b
 80045c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045c8:	f89a 3000 	ldrb.w	r3, [sl]
 80045cc:	2b2a      	cmp	r3, #42	; 0x2a
 80045ce:	d015      	beq.n	80045fc <_vfiprintf_r+0x13c>
 80045d0:	9a07      	ldr	r2, [sp, #28]
 80045d2:	4654      	mov	r4, sl
 80045d4:	2000      	movs	r0, #0
 80045d6:	f04f 0c0a 	mov.w	ip, #10
 80045da:	4621      	mov	r1, r4
 80045dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045e0:	3b30      	subs	r3, #48	; 0x30
 80045e2:	2b09      	cmp	r3, #9
 80045e4:	d94e      	bls.n	8004684 <_vfiprintf_r+0x1c4>
 80045e6:	b1b0      	cbz	r0, 8004616 <_vfiprintf_r+0x156>
 80045e8:	9207      	str	r2, [sp, #28]
 80045ea:	e014      	b.n	8004616 <_vfiprintf_r+0x156>
 80045ec:	eba0 0308 	sub.w	r3, r0, r8
 80045f0:	fa09 f303 	lsl.w	r3, r9, r3
 80045f4:	4313      	orrs	r3, r2
 80045f6:	9304      	str	r3, [sp, #16]
 80045f8:	46a2      	mov	sl, r4
 80045fa:	e7d2      	b.n	80045a2 <_vfiprintf_r+0xe2>
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	1d19      	adds	r1, r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	9103      	str	r1, [sp, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	bfbb      	ittet	lt
 8004608:	425b      	neglt	r3, r3
 800460a:	f042 0202 	orrlt.w	r2, r2, #2
 800460e:	9307      	strge	r3, [sp, #28]
 8004610:	9307      	strlt	r3, [sp, #28]
 8004612:	bfb8      	it	lt
 8004614:	9204      	strlt	r2, [sp, #16]
 8004616:	7823      	ldrb	r3, [r4, #0]
 8004618:	2b2e      	cmp	r3, #46	; 0x2e
 800461a:	d10c      	bne.n	8004636 <_vfiprintf_r+0x176>
 800461c:	7863      	ldrb	r3, [r4, #1]
 800461e:	2b2a      	cmp	r3, #42	; 0x2a
 8004620:	d135      	bne.n	800468e <_vfiprintf_r+0x1ce>
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	1d1a      	adds	r2, r3, #4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	9203      	str	r2, [sp, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	bfb8      	it	lt
 800462e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004632:	3402      	adds	r4, #2
 8004634:	9305      	str	r3, [sp, #20]
 8004636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800471c <_vfiprintf_r+0x25c>
 800463a:	7821      	ldrb	r1, [r4, #0]
 800463c:	2203      	movs	r2, #3
 800463e:	4650      	mov	r0, sl
 8004640:	f7fb fde6 	bl	8000210 <memchr>
 8004644:	b140      	cbz	r0, 8004658 <_vfiprintf_r+0x198>
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	eba0 000a 	sub.w	r0, r0, sl
 800464c:	fa03 f000 	lsl.w	r0, r3, r0
 8004650:	9b04      	ldr	r3, [sp, #16]
 8004652:	4303      	orrs	r3, r0
 8004654:	3401      	adds	r4, #1
 8004656:	9304      	str	r3, [sp, #16]
 8004658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465c:	482c      	ldr	r0, [pc, #176]	; (8004710 <_vfiprintf_r+0x250>)
 800465e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004662:	2206      	movs	r2, #6
 8004664:	f7fb fdd4 	bl	8000210 <memchr>
 8004668:	2800      	cmp	r0, #0
 800466a:	d03f      	beq.n	80046ec <_vfiprintf_r+0x22c>
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <_vfiprintf_r+0x254>)
 800466e:	bb1b      	cbnz	r3, 80046b8 <_vfiprintf_r+0x1f8>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	3307      	adds	r3, #7
 8004674:	f023 0307 	bic.w	r3, r3, #7
 8004678:	3308      	adds	r3, #8
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467e:	443b      	add	r3, r7
 8004680:	9309      	str	r3, [sp, #36]	; 0x24
 8004682:	e767      	b.n	8004554 <_vfiprintf_r+0x94>
 8004684:	fb0c 3202 	mla	r2, ip, r2, r3
 8004688:	460c      	mov	r4, r1
 800468a:	2001      	movs	r0, #1
 800468c:	e7a5      	b.n	80045da <_vfiprintf_r+0x11a>
 800468e:	2300      	movs	r3, #0
 8004690:	3401      	adds	r4, #1
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	4619      	mov	r1, r3
 8004696:	f04f 0c0a 	mov.w	ip, #10
 800469a:	4620      	mov	r0, r4
 800469c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046a0:	3a30      	subs	r2, #48	; 0x30
 80046a2:	2a09      	cmp	r2, #9
 80046a4:	d903      	bls.n	80046ae <_vfiprintf_r+0x1ee>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0c5      	beq.n	8004636 <_vfiprintf_r+0x176>
 80046aa:	9105      	str	r1, [sp, #20]
 80046ac:	e7c3      	b.n	8004636 <_vfiprintf_r+0x176>
 80046ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80046b2:	4604      	mov	r4, r0
 80046b4:	2301      	movs	r3, #1
 80046b6:	e7f0      	b.n	800469a <_vfiprintf_r+0x1da>
 80046b8:	ab03      	add	r3, sp, #12
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	462a      	mov	r2, r5
 80046be:	4b16      	ldr	r3, [pc, #88]	; (8004718 <_vfiprintf_r+0x258>)
 80046c0:	a904      	add	r1, sp, #16
 80046c2:	4630      	mov	r0, r6
 80046c4:	f3af 8000 	nop.w
 80046c8:	4607      	mov	r7, r0
 80046ca:	1c78      	adds	r0, r7, #1
 80046cc:	d1d6      	bne.n	800467c <_vfiprintf_r+0x1bc>
 80046ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046d0:	07d9      	lsls	r1, r3, #31
 80046d2:	d405      	bmi.n	80046e0 <_vfiprintf_r+0x220>
 80046d4:	89ab      	ldrh	r3, [r5, #12]
 80046d6:	059a      	lsls	r2, r3, #22
 80046d8:	d402      	bmi.n	80046e0 <_vfiprintf_r+0x220>
 80046da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046dc:	f7ff feb9 	bl	8004452 <__retarget_lock_release_recursive>
 80046e0:	89ab      	ldrh	r3, [r5, #12]
 80046e2:	065b      	lsls	r3, r3, #25
 80046e4:	f53f af12 	bmi.w	800450c <_vfiprintf_r+0x4c>
 80046e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046ea:	e711      	b.n	8004510 <_vfiprintf_r+0x50>
 80046ec:	ab03      	add	r3, sp, #12
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	462a      	mov	r2, r5
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <_vfiprintf_r+0x258>)
 80046f4:	a904      	add	r1, sp, #16
 80046f6:	4630      	mov	r0, r6
 80046f8:	f000 f880 	bl	80047fc <_printf_i>
 80046fc:	e7e4      	b.n	80046c8 <_vfiprintf_r+0x208>
 80046fe:	bf00      	nop
 8004700:	080050fc 	.word	0x080050fc
 8004704:	0800511c 	.word	0x0800511c
 8004708:	080050dc 	.word	0x080050dc
 800470c:	0800513c 	.word	0x0800513c
 8004710:	08005146 	.word	0x08005146
 8004714:	00000000 	.word	0x00000000
 8004718:	0800449b 	.word	0x0800449b
 800471c:	08005142 	.word	0x08005142

08004720 <_printf_common>:
 8004720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	4616      	mov	r6, r2
 8004726:	4699      	mov	r9, r3
 8004728:	688a      	ldr	r2, [r1, #8]
 800472a:	690b      	ldr	r3, [r1, #16]
 800472c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004730:	4293      	cmp	r3, r2
 8004732:	bfb8      	it	lt
 8004734:	4613      	movlt	r3, r2
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800473c:	4607      	mov	r7, r0
 800473e:	460c      	mov	r4, r1
 8004740:	b10a      	cbz	r2, 8004746 <_printf_common+0x26>
 8004742:	3301      	adds	r3, #1
 8004744:	6033      	str	r3, [r6, #0]
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	0699      	lsls	r1, r3, #26
 800474a:	bf42      	ittt	mi
 800474c:	6833      	ldrmi	r3, [r6, #0]
 800474e:	3302      	addmi	r3, #2
 8004750:	6033      	strmi	r3, [r6, #0]
 8004752:	6825      	ldr	r5, [r4, #0]
 8004754:	f015 0506 	ands.w	r5, r5, #6
 8004758:	d106      	bne.n	8004768 <_printf_common+0x48>
 800475a:	f104 0a19 	add.w	sl, r4, #25
 800475e:	68e3      	ldr	r3, [r4, #12]
 8004760:	6832      	ldr	r2, [r6, #0]
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	42ab      	cmp	r3, r5
 8004766:	dc26      	bgt.n	80047b6 <_printf_common+0x96>
 8004768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800476c:	1e13      	subs	r3, r2, #0
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	bf18      	it	ne
 8004772:	2301      	movne	r3, #1
 8004774:	0692      	lsls	r2, r2, #26
 8004776:	d42b      	bmi.n	80047d0 <_printf_common+0xb0>
 8004778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800477c:	4649      	mov	r1, r9
 800477e:	4638      	mov	r0, r7
 8004780:	47c0      	blx	r8
 8004782:	3001      	adds	r0, #1
 8004784:	d01e      	beq.n	80047c4 <_printf_common+0xa4>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	68e5      	ldr	r5, [r4, #12]
 800478a:	6832      	ldr	r2, [r6, #0]
 800478c:	f003 0306 	and.w	r3, r3, #6
 8004790:	2b04      	cmp	r3, #4
 8004792:	bf08      	it	eq
 8004794:	1aad      	subeq	r5, r5, r2
 8004796:	68a3      	ldr	r3, [r4, #8]
 8004798:	6922      	ldr	r2, [r4, #16]
 800479a:	bf0c      	ite	eq
 800479c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a0:	2500      	movne	r5, #0
 80047a2:	4293      	cmp	r3, r2
 80047a4:	bfc4      	itt	gt
 80047a6:	1a9b      	subgt	r3, r3, r2
 80047a8:	18ed      	addgt	r5, r5, r3
 80047aa:	2600      	movs	r6, #0
 80047ac:	341a      	adds	r4, #26
 80047ae:	42b5      	cmp	r5, r6
 80047b0:	d11a      	bne.n	80047e8 <_printf_common+0xc8>
 80047b2:	2000      	movs	r0, #0
 80047b4:	e008      	b.n	80047c8 <_printf_common+0xa8>
 80047b6:	2301      	movs	r3, #1
 80047b8:	4652      	mov	r2, sl
 80047ba:	4649      	mov	r1, r9
 80047bc:	4638      	mov	r0, r7
 80047be:	47c0      	blx	r8
 80047c0:	3001      	adds	r0, #1
 80047c2:	d103      	bne.n	80047cc <_printf_common+0xac>
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	3501      	adds	r5, #1
 80047ce:	e7c6      	b.n	800475e <_printf_common+0x3e>
 80047d0:	18e1      	adds	r1, r4, r3
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	2030      	movs	r0, #48	; 0x30
 80047d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047da:	4422      	add	r2, r4
 80047dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047e4:	3302      	adds	r3, #2
 80047e6:	e7c7      	b.n	8004778 <_printf_common+0x58>
 80047e8:	2301      	movs	r3, #1
 80047ea:	4622      	mov	r2, r4
 80047ec:	4649      	mov	r1, r9
 80047ee:	4638      	mov	r0, r7
 80047f0:	47c0      	blx	r8
 80047f2:	3001      	adds	r0, #1
 80047f4:	d0e6      	beq.n	80047c4 <_printf_common+0xa4>
 80047f6:	3601      	adds	r6, #1
 80047f8:	e7d9      	b.n	80047ae <_printf_common+0x8e>
	...

080047fc <_printf_i>:
 80047fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	460c      	mov	r4, r1
 8004802:	4691      	mov	r9, r2
 8004804:	7e27      	ldrb	r7, [r4, #24]
 8004806:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004808:	2f78      	cmp	r7, #120	; 0x78
 800480a:	4680      	mov	r8, r0
 800480c:	469a      	mov	sl, r3
 800480e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004812:	d807      	bhi.n	8004824 <_printf_i+0x28>
 8004814:	2f62      	cmp	r7, #98	; 0x62
 8004816:	d80a      	bhi.n	800482e <_printf_i+0x32>
 8004818:	2f00      	cmp	r7, #0
 800481a:	f000 80d8 	beq.w	80049ce <_printf_i+0x1d2>
 800481e:	2f58      	cmp	r7, #88	; 0x58
 8004820:	f000 80a3 	beq.w	800496a <_printf_i+0x16e>
 8004824:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800482c:	e03a      	b.n	80048a4 <_printf_i+0xa8>
 800482e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004832:	2b15      	cmp	r3, #21
 8004834:	d8f6      	bhi.n	8004824 <_printf_i+0x28>
 8004836:	a001      	add	r0, pc, #4	; (adr r0, 800483c <_printf_i+0x40>)
 8004838:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800483c:	08004895 	.word	0x08004895
 8004840:	080048a9 	.word	0x080048a9
 8004844:	08004825 	.word	0x08004825
 8004848:	08004825 	.word	0x08004825
 800484c:	08004825 	.word	0x08004825
 8004850:	08004825 	.word	0x08004825
 8004854:	080048a9 	.word	0x080048a9
 8004858:	08004825 	.word	0x08004825
 800485c:	08004825 	.word	0x08004825
 8004860:	08004825 	.word	0x08004825
 8004864:	08004825 	.word	0x08004825
 8004868:	080049b5 	.word	0x080049b5
 800486c:	080048d9 	.word	0x080048d9
 8004870:	08004997 	.word	0x08004997
 8004874:	08004825 	.word	0x08004825
 8004878:	08004825 	.word	0x08004825
 800487c:	080049d7 	.word	0x080049d7
 8004880:	08004825 	.word	0x08004825
 8004884:	080048d9 	.word	0x080048d9
 8004888:	08004825 	.word	0x08004825
 800488c:	08004825 	.word	0x08004825
 8004890:	0800499f 	.word	0x0800499f
 8004894:	680b      	ldr	r3, [r1, #0]
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	600a      	str	r2, [r1, #0]
 800489c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0a3      	b.n	80049f0 <_printf_i+0x1f4>
 80048a8:	6825      	ldr	r5, [r4, #0]
 80048aa:	6808      	ldr	r0, [r1, #0]
 80048ac:	062e      	lsls	r6, r5, #24
 80048ae:	f100 0304 	add.w	r3, r0, #4
 80048b2:	d50a      	bpl.n	80048ca <_printf_i+0xce>
 80048b4:	6805      	ldr	r5, [r0, #0]
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	da03      	bge.n	80048c4 <_printf_i+0xc8>
 80048bc:	232d      	movs	r3, #45	; 0x2d
 80048be:	426d      	negs	r5, r5
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c4:	485e      	ldr	r0, [pc, #376]	; (8004a40 <_printf_i+0x244>)
 80048c6:	230a      	movs	r3, #10
 80048c8:	e019      	b.n	80048fe <_printf_i+0x102>
 80048ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048ce:	6805      	ldr	r5, [r0, #0]
 80048d0:	600b      	str	r3, [r1, #0]
 80048d2:	bf18      	it	ne
 80048d4:	b22d      	sxthne	r5, r5
 80048d6:	e7ef      	b.n	80048b8 <_printf_i+0xbc>
 80048d8:	680b      	ldr	r3, [r1, #0]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	1d18      	adds	r0, r3, #4
 80048de:	6008      	str	r0, [r1, #0]
 80048e0:	0628      	lsls	r0, r5, #24
 80048e2:	d501      	bpl.n	80048e8 <_printf_i+0xec>
 80048e4:	681d      	ldr	r5, [r3, #0]
 80048e6:	e002      	b.n	80048ee <_printf_i+0xf2>
 80048e8:	0669      	lsls	r1, r5, #25
 80048ea:	d5fb      	bpl.n	80048e4 <_printf_i+0xe8>
 80048ec:	881d      	ldrh	r5, [r3, #0]
 80048ee:	4854      	ldr	r0, [pc, #336]	; (8004a40 <_printf_i+0x244>)
 80048f0:	2f6f      	cmp	r7, #111	; 0x6f
 80048f2:	bf0c      	ite	eq
 80048f4:	2308      	moveq	r3, #8
 80048f6:	230a      	movne	r3, #10
 80048f8:	2100      	movs	r1, #0
 80048fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048fe:	6866      	ldr	r6, [r4, #4]
 8004900:	60a6      	str	r6, [r4, #8]
 8004902:	2e00      	cmp	r6, #0
 8004904:	bfa2      	ittt	ge
 8004906:	6821      	ldrge	r1, [r4, #0]
 8004908:	f021 0104 	bicge.w	r1, r1, #4
 800490c:	6021      	strge	r1, [r4, #0]
 800490e:	b90d      	cbnz	r5, 8004914 <_printf_i+0x118>
 8004910:	2e00      	cmp	r6, #0
 8004912:	d04d      	beq.n	80049b0 <_printf_i+0x1b4>
 8004914:	4616      	mov	r6, r2
 8004916:	fbb5 f1f3 	udiv	r1, r5, r3
 800491a:	fb03 5711 	mls	r7, r3, r1, r5
 800491e:	5dc7      	ldrb	r7, [r0, r7]
 8004920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004924:	462f      	mov	r7, r5
 8004926:	42bb      	cmp	r3, r7
 8004928:	460d      	mov	r5, r1
 800492a:	d9f4      	bls.n	8004916 <_printf_i+0x11a>
 800492c:	2b08      	cmp	r3, #8
 800492e:	d10b      	bne.n	8004948 <_printf_i+0x14c>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	07df      	lsls	r7, r3, #31
 8004934:	d508      	bpl.n	8004948 <_printf_i+0x14c>
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	6861      	ldr	r1, [r4, #4]
 800493a:	4299      	cmp	r1, r3
 800493c:	bfde      	ittt	le
 800493e:	2330      	movle	r3, #48	; 0x30
 8004940:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004944:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004948:	1b92      	subs	r2, r2, r6
 800494a:	6122      	str	r2, [r4, #16]
 800494c:	f8cd a000 	str.w	sl, [sp]
 8004950:	464b      	mov	r3, r9
 8004952:	aa03      	add	r2, sp, #12
 8004954:	4621      	mov	r1, r4
 8004956:	4640      	mov	r0, r8
 8004958:	f7ff fee2 	bl	8004720 <_printf_common>
 800495c:	3001      	adds	r0, #1
 800495e:	d14c      	bne.n	80049fa <_printf_i+0x1fe>
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	b004      	add	sp, #16
 8004966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496a:	4835      	ldr	r0, [pc, #212]	; (8004a40 <_printf_i+0x244>)
 800496c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	680e      	ldr	r6, [r1, #0]
 8004974:	061f      	lsls	r7, r3, #24
 8004976:	f856 5b04 	ldr.w	r5, [r6], #4
 800497a:	600e      	str	r6, [r1, #0]
 800497c:	d514      	bpl.n	80049a8 <_printf_i+0x1ac>
 800497e:	07d9      	lsls	r1, r3, #31
 8004980:	bf44      	itt	mi
 8004982:	f043 0320 	orrmi.w	r3, r3, #32
 8004986:	6023      	strmi	r3, [r4, #0]
 8004988:	b91d      	cbnz	r5, 8004992 <_printf_i+0x196>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	f023 0320 	bic.w	r3, r3, #32
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	2310      	movs	r3, #16
 8004994:	e7b0      	b.n	80048f8 <_printf_i+0xfc>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	f043 0320 	orr.w	r3, r3, #32
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	2378      	movs	r3, #120	; 0x78
 80049a0:	4828      	ldr	r0, [pc, #160]	; (8004a44 <_printf_i+0x248>)
 80049a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049a6:	e7e3      	b.n	8004970 <_printf_i+0x174>
 80049a8:	065e      	lsls	r6, r3, #25
 80049aa:	bf48      	it	mi
 80049ac:	b2ad      	uxthmi	r5, r5
 80049ae:	e7e6      	b.n	800497e <_printf_i+0x182>
 80049b0:	4616      	mov	r6, r2
 80049b2:	e7bb      	b.n	800492c <_printf_i+0x130>
 80049b4:	680b      	ldr	r3, [r1, #0]
 80049b6:	6826      	ldr	r6, [r4, #0]
 80049b8:	6960      	ldr	r0, [r4, #20]
 80049ba:	1d1d      	adds	r5, r3, #4
 80049bc:	600d      	str	r5, [r1, #0]
 80049be:	0635      	lsls	r5, r6, #24
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	d501      	bpl.n	80049c8 <_printf_i+0x1cc>
 80049c4:	6018      	str	r0, [r3, #0]
 80049c6:	e002      	b.n	80049ce <_printf_i+0x1d2>
 80049c8:	0671      	lsls	r1, r6, #25
 80049ca:	d5fb      	bpl.n	80049c4 <_printf_i+0x1c8>
 80049cc:	8018      	strh	r0, [r3, #0]
 80049ce:	2300      	movs	r3, #0
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	4616      	mov	r6, r2
 80049d4:	e7ba      	b.n	800494c <_printf_i+0x150>
 80049d6:	680b      	ldr	r3, [r1, #0]
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	600a      	str	r2, [r1, #0]
 80049dc:	681e      	ldr	r6, [r3, #0]
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	2100      	movs	r1, #0
 80049e2:	4630      	mov	r0, r6
 80049e4:	f7fb fc14 	bl	8000210 <memchr>
 80049e8:	b108      	cbz	r0, 80049ee <_printf_i+0x1f2>
 80049ea:	1b80      	subs	r0, r0, r6
 80049ec:	6060      	str	r0, [r4, #4]
 80049ee:	6863      	ldr	r3, [r4, #4]
 80049f0:	6123      	str	r3, [r4, #16]
 80049f2:	2300      	movs	r3, #0
 80049f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f8:	e7a8      	b.n	800494c <_printf_i+0x150>
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	4632      	mov	r2, r6
 80049fe:	4649      	mov	r1, r9
 8004a00:	4640      	mov	r0, r8
 8004a02:	47d0      	blx	sl
 8004a04:	3001      	adds	r0, #1
 8004a06:	d0ab      	beq.n	8004960 <_printf_i+0x164>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	079b      	lsls	r3, r3, #30
 8004a0c:	d413      	bmi.n	8004a36 <_printf_i+0x23a>
 8004a0e:	68e0      	ldr	r0, [r4, #12]
 8004a10:	9b03      	ldr	r3, [sp, #12]
 8004a12:	4298      	cmp	r0, r3
 8004a14:	bfb8      	it	lt
 8004a16:	4618      	movlt	r0, r3
 8004a18:	e7a4      	b.n	8004964 <_printf_i+0x168>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	4649      	mov	r1, r9
 8004a20:	4640      	mov	r0, r8
 8004a22:	47d0      	blx	sl
 8004a24:	3001      	adds	r0, #1
 8004a26:	d09b      	beq.n	8004960 <_printf_i+0x164>
 8004a28:	3501      	adds	r5, #1
 8004a2a:	68e3      	ldr	r3, [r4, #12]
 8004a2c:	9903      	ldr	r1, [sp, #12]
 8004a2e:	1a5b      	subs	r3, r3, r1
 8004a30:	42ab      	cmp	r3, r5
 8004a32:	dcf2      	bgt.n	8004a1a <_printf_i+0x21e>
 8004a34:	e7eb      	b.n	8004a0e <_printf_i+0x212>
 8004a36:	2500      	movs	r5, #0
 8004a38:	f104 0619 	add.w	r6, r4, #25
 8004a3c:	e7f5      	b.n	8004a2a <_printf_i+0x22e>
 8004a3e:	bf00      	nop
 8004a40:	0800514d 	.word	0x0800514d
 8004a44:	0800515e 	.word	0x0800515e

08004a48 <__sread>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a50:	f000 fa58 	bl	8004f04 <_read_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	bfab      	itete	ge
 8004a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a5c:	181b      	addge	r3, r3, r0
 8004a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a62:	bfac      	ite	ge
 8004a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a66:	81a3      	strhlt	r3, [r4, #12]
 8004a68:	bd10      	pop	{r4, pc}

08004a6a <__swrite>:
 8004a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6e:	461f      	mov	r7, r3
 8004a70:	898b      	ldrh	r3, [r1, #12]
 8004a72:	05db      	lsls	r3, r3, #23
 8004a74:	4605      	mov	r5, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	4616      	mov	r6, r2
 8004a7a:	d505      	bpl.n	8004a88 <__swrite+0x1e>
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	2302      	movs	r3, #2
 8004a82:	2200      	movs	r2, #0
 8004a84:	f000 f9c8 	bl	8004e18 <_lseek_r>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	4628      	mov	r0, r5
 8004a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9e:	f000 b869 	b.w	8004b74 <_write_r>

08004aa2 <__sseek>:
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aaa:	f000 f9b5 	bl	8004e18 <_lseek_r>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	bf15      	itete	ne
 8004ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004abe:	81a3      	strheq	r3, [r4, #12]
 8004ac0:	bf18      	it	ne
 8004ac2:	81a3      	strhne	r3, [r4, #12]
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <__sclose>:
 8004ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aca:	f000 b8d3 	b.w	8004c74 <_close_r>
	...

08004ad0 <__swbuf_r>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	460e      	mov	r6, r1
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	b118      	cbz	r0, 8004ae2 <__swbuf_r+0x12>
 8004ada:	6983      	ldr	r3, [r0, #24]
 8004adc:	b90b      	cbnz	r3, 8004ae2 <__swbuf_r+0x12>
 8004ade:	f7ff fc19 	bl	8004314 <__sinit>
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <__swbuf_r+0x98>)
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	d12b      	bne.n	8004b40 <__swbuf_r+0x70>
 8004ae8:	686c      	ldr	r4, [r5, #4]
 8004aea:	69a3      	ldr	r3, [r4, #24]
 8004aec:	60a3      	str	r3, [r4, #8]
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	071a      	lsls	r2, r3, #28
 8004af2:	d52f      	bpl.n	8004b54 <__swbuf_r+0x84>
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	b36b      	cbz	r3, 8004b54 <__swbuf_r+0x84>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	6820      	ldr	r0, [r4, #0]
 8004afc:	1ac0      	subs	r0, r0, r3
 8004afe:	6963      	ldr	r3, [r4, #20]
 8004b00:	b2f6      	uxtb	r6, r6
 8004b02:	4283      	cmp	r3, r0
 8004b04:	4637      	mov	r7, r6
 8004b06:	dc04      	bgt.n	8004b12 <__swbuf_r+0x42>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f948 	bl	8004da0 <_fflush_r>
 8004b10:	bb30      	cbnz	r0, 8004b60 <__swbuf_r+0x90>
 8004b12:	68a3      	ldr	r3, [r4, #8]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	60a3      	str	r3, [r4, #8]
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	701e      	strb	r6, [r3, #0]
 8004b20:	6963      	ldr	r3, [r4, #20]
 8004b22:	3001      	adds	r0, #1
 8004b24:	4283      	cmp	r3, r0
 8004b26:	d004      	beq.n	8004b32 <__swbuf_r+0x62>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	07db      	lsls	r3, r3, #31
 8004b2c:	d506      	bpl.n	8004b3c <__swbuf_r+0x6c>
 8004b2e:	2e0a      	cmp	r6, #10
 8004b30:	d104      	bne.n	8004b3c <__swbuf_r+0x6c>
 8004b32:	4621      	mov	r1, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 f933 	bl	8004da0 <_fflush_r>
 8004b3a:	b988      	cbnz	r0, 8004b60 <__swbuf_r+0x90>
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <__swbuf_r+0x9c>)
 8004b42:	429c      	cmp	r4, r3
 8004b44:	d101      	bne.n	8004b4a <__swbuf_r+0x7a>
 8004b46:	68ac      	ldr	r4, [r5, #8]
 8004b48:	e7cf      	b.n	8004aea <__swbuf_r+0x1a>
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <__swbuf_r+0xa0>)
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	bf08      	it	eq
 8004b50:	68ec      	ldreq	r4, [r5, #12]
 8004b52:	e7ca      	b.n	8004aea <__swbuf_r+0x1a>
 8004b54:	4621      	mov	r1, r4
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 f81e 	bl	8004b98 <__swsetup_r>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d0cb      	beq.n	8004af8 <__swbuf_r+0x28>
 8004b60:	f04f 37ff 	mov.w	r7, #4294967295
 8004b64:	e7ea      	b.n	8004b3c <__swbuf_r+0x6c>
 8004b66:	bf00      	nop
 8004b68:	080050fc 	.word	0x080050fc
 8004b6c:	0800511c 	.word	0x0800511c
 8004b70:	080050dc 	.word	0x080050dc

08004b74 <_write_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d07      	ldr	r5, [pc, #28]	; (8004b94 <_write_r+0x20>)
 8004b78:	4604      	mov	r4, r0
 8004b7a:	4608      	mov	r0, r1
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	2200      	movs	r2, #0
 8004b80:	602a      	str	r2, [r5, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f7fc f9e1 	bl	8000f4a <_write>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_write_r+0x1e>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_write_r+0x1e>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	20000298 	.word	0x20000298

08004b98 <__swsetup_r>:
 8004b98:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <__swsetup_r+0xcc>)
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	b125      	cbz	r5, 8004bae <__swsetup_r+0x16>
 8004ba4:	69ab      	ldr	r3, [r5, #24]
 8004ba6:	b913      	cbnz	r3, 8004bae <__swsetup_r+0x16>
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f7ff fbb3 	bl	8004314 <__sinit>
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <__swsetup_r+0xd0>)
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	d10f      	bne.n	8004bd4 <__swsetup_r+0x3c>
 8004bb4:	686c      	ldr	r4, [r5, #4]
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bbc:	0719      	lsls	r1, r3, #28
 8004bbe:	d42c      	bmi.n	8004c1a <__swsetup_r+0x82>
 8004bc0:	06dd      	lsls	r5, r3, #27
 8004bc2:	d411      	bmi.n	8004be8 <__swsetup_r+0x50>
 8004bc4:	2309      	movs	r3, #9
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd2:	e03e      	b.n	8004c52 <__swsetup_r+0xba>
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <__swsetup_r+0xd4>)
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	d101      	bne.n	8004bde <__swsetup_r+0x46>
 8004bda:	68ac      	ldr	r4, [r5, #8]
 8004bdc:	e7eb      	b.n	8004bb6 <__swsetup_r+0x1e>
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <__swsetup_r+0xd8>)
 8004be0:	429c      	cmp	r4, r3
 8004be2:	bf08      	it	eq
 8004be4:	68ec      	ldreq	r4, [r5, #12]
 8004be6:	e7e6      	b.n	8004bb6 <__swsetup_r+0x1e>
 8004be8:	0758      	lsls	r0, r3, #29
 8004bea:	d512      	bpl.n	8004c12 <__swsetup_r+0x7a>
 8004bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bee:	b141      	cbz	r1, 8004c02 <__swsetup_r+0x6a>
 8004bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	d002      	beq.n	8004bfe <__swsetup_r+0x66>
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff fa61 	bl	80040c0 <_free_r>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6363      	str	r3, [r4, #52]	; 0x34
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6063      	str	r3, [r4, #4]
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f043 0308 	orr.w	r3, r3, #8
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	b94b      	cbnz	r3, 8004c32 <__swsetup_r+0x9a>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d003      	beq.n	8004c32 <__swsetup_r+0x9a>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f000 f929 	bl	8004e84 <__smakebuf_r>
 8004c32:	89a0      	ldrh	r0, [r4, #12]
 8004c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c38:	f010 0301 	ands.w	r3, r0, #1
 8004c3c:	d00a      	beq.n	8004c54 <__swsetup_r+0xbc>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60a3      	str	r3, [r4, #8]
 8004c42:	6963      	ldr	r3, [r4, #20]
 8004c44:	425b      	negs	r3, r3
 8004c46:	61a3      	str	r3, [r4, #24]
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	b943      	cbnz	r3, 8004c5e <__swsetup_r+0xc6>
 8004c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c50:	d1ba      	bne.n	8004bc8 <__swsetup_r+0x30>
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	0781      	lsls	r1, r0, #30
 8004c56:	bf58      	it	pl
 8004c58:	6963      	ldrpl	r3, [r4, #20]
 8004c5a:	60a3      	str	r3, [r4, #8]
 8004c5c:	e7f4      	b.n	8004c48 <__swsetup_r+0xb0>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e7f7      	b.n	8004c52 <__swsetup_r+0xba>
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c
 8004c68:	080050fc 	.word	0x080050fc
 8004c6c:	0800511c 	.word	0x0800511c
 8004c70:	080050dc 	.word	0x080050dc

08004c74 <_close_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	; (8004c90 <_close_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fc f97f 	bl	8000f82 <_close>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_close_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_close_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	20000298 	.word	0x20000298

08004c94 <__sflush_r>:
 8004c94:	898a      	ldrh	r2, [r1, #12]
 8004c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	0710      	lsls	r0, r2, #28
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	d458      	bmi.n	8004d54 <__sflush_r+0xc0>
 8004ca2:	684b      	ldr	r3, [r1, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dc05      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc02      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	d0f9      	beq.n	8004cae <__sflush_r+0x1a>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cc0:	682f      	ldr	r7, [r5, #0]
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	d032      	beq.n	8004d2c <__sflush_r+0x98>
 8004cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	075a      	lsls	r2, r3, #29
 8004ccc:	d505      	bpl.n	8004cda <__sflush_r+0x46>
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	1ac0      	subs	r0, r0, r3
 8004cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cd4:	b10b      	cbz	r3, 8004cda <__sflush_r+0x46>
 8004cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cd8:	1ac0      	subs	r0, r0, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce0:	6a21      	ldr	r1, [r4, #32]
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b0      	blx	r6
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	d106      	bne.n	8004cfa <__sflush_r+0x66>
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	291d      	cmp	r1, #29
 8004cf0:	d82c      	bhi.n	8004d4c <__sflush_r+0xb8>
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <__sflush_r+0x108>)
 8004cf4:	40ca      	lsrs	r2, r1
 8004cf6:	07d6      	lsls	r6, r2, #31
 8004cf8:	d528      	bpl.n	8004d4c <__sflush_r+0xb8>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	04d9      	lsls	r1, r3, #19
 8004d00:	6922      	ldr	r2, [r4, #16]
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	d504      	bpl.n	8004d10 <__sflush_r+0x7c>
 8004d06:	1c42      	adds	r2, r0, #1
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0x7a>
 8004d0a:	682b      	ldr	r3, [r5, #0]
 8004d0c:	b903      	cbnz	r3, 8004d10 <__sflush_r+0x7c>
 8004d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d12:	602f      	str	r7, [r5, #0]
 8004d14:	2900      	cmp	r1, #0
 8004d16:	d0ca      	beq.n	8004cae <__sflush_r+0x1a>
 8004d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	d002      	beq.n	8004d26 <__sflush_r+0x92>
 8004d20:	4628      	mov	r0, r5
 8004d22:	f7ff f9cd 	bl	80040c0 <_free_r>
 8004d26:	2000      	movs	r0, #0
 8004d28:	6360      	str	r0, [r4, #52]	; 0x34
 8004d2a:	e7c1      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d2c:	6a21      	ldr	r1, [r4, #32]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b0      	blx	r6
 8004d34:	1c41      	adds	r1, r0, #1
 8004d36:	d1c7      	bne.n	8004cc8 <__sflush_r+0x34>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c4      	beq.n	8004cc8 <__sflush_r+0x34>
 8004d3e:	2b1d      	cmp	r3, #29
 8004d40:	d001      	beq.n	8004d46 <__sflush_r+0xb2>
 8004d42:	2b16      	cmp	r3, #22
 8004d44:	d101      	bne.n	8004d4a <__sflush_r+0xb6>
 8004d46:	602f      	str	r7, [r5, #0]
 8004d48:	e7b1      	b.n	8004cae <__sflush_r+0x1a>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	e7ad      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d54:	690f      	ldr	r7, [r1, #16]
 8004d56:	2f00      	cmp	r7, #0
 8004d58:	d0a9      	beq.n	8004cae <__sflush_r+0x1a>
 8004d5a:	0793      	lsls	r3, r2, #30
 8004d5c:	680e      	ldr	r6, [r1, #0]
 8004d5e:	bf08      	it	eq
 8004d60:	694b      	ldreq	r3, [r1, #20]
 8004d62:	600f      	str	r7, [r1, #0]
 8004d64:	bf18      	it	ne
 8004d66:	2300      	movne	r3, #0
 8004d68:	eba6 0807 	sub.w	r8, r6, r7
 8004d6c:	608b      	str	r3, [r1, #8]
 8004d6e:	f1b8 0f00 	cmp.w	r8, #0
 8004d72:	dd9c      	ble.n	8004cae <__sflush_r+0x1a>
 8004d74:	6a21      	ldr	r1, [r4, #32]
 8004d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d78:	4643      	mov	r3, r8
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	2800      	cmp	r0, #0
 8004d82:	dc06      	bgt.n	8004d92 <__sflush_r+0xfe>
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	e78e      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d92:	4407      	add	r7, r0
 8004d94:	eba8 0800 	sub.w	r8, r8, r0
 8004d98:	e7e9      	b.n	8004d6e <__sflush_r+0xda>
 8004d9a:	bf00      	nop
 8004d9c:	20400001 	.word	0x20400001

08004da0 <_fflush_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	690b      	ldr	r3, [r1, #16]
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b913      	cbnz	r3, 8004db0 <_fflush_r+0x10>
 8004daa:	2500      	movs	r5, #0
 8004dac:	4628      	mov	r0, r5
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	b118      	cbz	r0, 8004dba <_fflush_r+0x1a>
 8004db2:	6983      	ldr	r3, [r0, #24]
 8004db4:	b90b      	cbnz	r3, 8004dba <_fflush_r+0x1a>
 8004db6:	f7ff faad 	bl	8004314 <__sinit>
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <_fflush_r+0x6c>)
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	d11b      	bne.n	8004df8 <_fflush_r+0x58>
 8004dc0:	686c      	ldr	r4, [r5, #4]
 8004dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ef      	beq.n	8004daa <_fflush_r+0xa>
 8004dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dcc:	07d0      	lsls	r0, r2, #31
 8004dce:	d404      	bmi.n	8004dda <_fflush_r+0x3a>
 8004dd0:	0599      	lsls	r1, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_fflush_r+0x3a>
 8004dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dd6:	f7ff fb3b 	bl	8004450 <__retarget_lock_acquire_recursive>
 8004dda:	4628      	mov	r0, r5
 8004ddc:	4621      	mov	r1, r4
 8004dde:	f7ff ff59 	bl	8004c94 <__sflush_r>
 8004de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004de4:	07da      	lsls	r2, r3, #31
 8004de6:	4605      	mov	r5, r0
 8004de8:	d4e0      	bmi.n	8004dac <_fflush_r+0xc>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	059b      	lsls	r3, r3, #22
 8004dee:	d4dd      	bmi.n	8004dac <_fflush_r+0xc>
 8004df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df2:	f7ff fb2e 	bl	8004452 <__retarget_lock_release_recursive>
 8004df6:	e7d9      	b.n	8004dac <_fflush_r+0xc>
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <_fflush_r+0x70>)
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	d101      	bne.n	8004e02 <_fflush_r+0x62>
 8004dfe:	68ac      	ldr	r4, [r5, #8]
 8004e00:	e7df      	b.n	8004dc2 <_fflush_r+0x22>
 8004e02:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <_fflush_r+0x74>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	bf08      	it	eq
 8004e08:	68ec      	ldreq	r4, [r5, #12]
 8004e0a:	e7da      	b.n	8004dc2 <_fflush_r+0x22>
 8004e0c:	080050fc 	.word	0x080050fc
 8004e10:	0800511c 	.word	0x0800511c
 8004e14:	080050dc 	.word	0x080050dc

08004e18 <_lseek_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4d07      	ldr	r5, [pc, #28]	; (8004e38 <_lseek_r+0x20>)
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	4608      	mov	r0, r1
 8004e20:	4611      	mov	r1, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	602a      	str	r2, [r5, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f7fc f8d2 	bl	8000fd0 <_lseek>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_lseek_r+0x1e>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_lseek_r+0x1e>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20000298 	.word	0x20000298

08004e3c <__swhatbuf_r>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	460e      	mov	r6, r1
 8004e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e44:	2900      	cmp	r1, #0
 8004e46:	b096      	sub	sp, #88	; 0x58
 8004e48:	4614      	mov	r4, r2
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	da07      	bge.n	8004e5e <__swhatbuf_r+0x22>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	89b3      	ldrh	r3, [r6, #12]
 8004e54:	061a      	lsls	r2, r3, #24
 8004e56:	d410      	bmi.n	8004e7a <__swhatbuf_r+0x3e>
 8004e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5c:	e00e      	b.n	8004e7c <__swhatbuf_r+0x40>
 8004e5e:	466a      	mov	r2, sp
 8004e60:	f000 f862 	bl	8004f28 <_fstat_r>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	dbf2      	blt.n	8004e4e <__swhatbuf_r+0x12>
 8004e68:	9a01      	ldr	r2, [sp, #4]
 8004e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e72:	425a      	negs	r2, r3
 8004e74:	415a      	adcs	r2, r3
 8004e76:	602a      	str	r2, [r5, #0]
 8004e78:	e7ee      	b.n	8004e58 <__swhatbuf_r+0x1c>
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	b016      	add	sp, #88	; 0x58
 8004e82:	bd70      	pop	{r4, r5, r6, pc}

08004e84 <__smakebuf_r>:
 8004e84:	898b      	ldrh	r3, [r1, #12]
 8004e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e88:	079d      	lsls	r5, r3, #30
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	d507      	bpl.n	8004ea0 <__smakebuf_r+0x1c>
 8004e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	6163      	str	r3, [r4, #20]
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	ab01      	add	r3, sp, #4
 8004ea2:	466a      	mov	r2, sp
 8004ea4:	f7ff ffca 	bl	8004e3c <__swhatbuf_r>
 8004ea8:	9900      	ldr	r1, [sp, #0]
 8004eaa:	4605      	mov	r5, r0
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7ff f957 	bl	8004160 <_malloc_r>
 8004eb2:	b948      	cbnz	r0, 8004ec8 <__smakebuf_r+0x44>
 8004eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb8:	059a      	lsls	r2, r3, #22
 8004eba:	d4ef      	bmi.n	8004e9c <__smakebuf_r+0x18>
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	e7e3      	b.n	8004e90 <__smakebuf_r+0xc>
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <__smakebuf_r+0x7c>)
 8004eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	6020      	str	r0, [r4, #0]
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	9b00      	ldr	r3, [sp, #0]
 8004ed8:	6163      	str	r3, [r4, #20]
 8004eda:	9b01      	ldr	r3, [sp, #4]
 8004edc:	6120      	str	r0, [r4, #16]
 8004ede:	b15b      	cbz	r3, 8004ef8 <__smakebuf_r+0x74>
 8004ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f831 	bl	8004f4c <_isatty_r>
 8004eea:	b128      	cbz	r0, 8004ef8 <__smakebuf_r+0x74>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	89a0      	ldrh	r0, [r4, #12]
 8004efa:	4305      	orrs	r5, r0
 8004efc:	81a5      	strh	r5, [r4, #12]
 8004efe:	e7cd      	b.n	8004e9c <__smakebuf_r+0x18>
 8004f00:	080042ad 	.word	0x080042ad

08004f04 <_read_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4d07      	ldr	r5, [pc, #28]	; (8004f24 <_read_r+0x20>)
 8004f08:	4604      	mov	r4, r0
 8004f0a:	4608      	mov	r0, r1
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	2200      	movs	r2, #0
 8004f10:	602a      	str	r2, [r5, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f7fb fffc 	bl	8000f10 <_read>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_read_r+0x1e>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_read_r+0x1e>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	20000298 	.word	0x20000298

08004f28 <_fstat_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4d07      	ldr	r5, [pc, #28]	; (8004f48 <_fstat_r+0x20>)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	602b      	str	r3, [r5, #0]
 8004f36:	f7fc f830 	bl	8000f9a <_fstat>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	d102      	bne.n	8004f44 <_fstat_r+0x1c>
 8004f3e:	682b      	ldr	r3, [r5, #0]
 8004f40:	b103      	cbz	r3, 8004f44 <_fstat_r+0x1c>
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	bd38      	pop	{r3, r4, r5, pc}
 8004f46:	bf00      	nop
 8004f48:	20000298 	.word	0x20000298

08004f4c <_isatty_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4d06      	ldr	r5, [pc, #24]	; (8004f68 <_isatty_r+0x1c>)
 8004f50:	2300      	movs	r3, #0
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	602b      	str	r3, [r5, #0]
 8004f58:	f7fc f82f 	bl	8000fba <_isatty>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_isatty_r+0x1a>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_isatty_r+0x1a>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	20000298 	.word	0x20000298

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
